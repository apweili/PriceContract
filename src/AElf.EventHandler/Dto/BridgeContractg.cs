// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bridge_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Bridge {

  /// <summary>Holder for reflection information generated from bridge_contract.proto</summary>
  public static partial class BridgeContractReflection {

    #region Descriptor
    /// <summary>File descriptor for bridge_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BridgeContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVicmlkZ2VfY29udHJhY3QucHJvdG8aD2FlbGYvY29yZS5wcm90bxoSYWVs",
            "Zi9vcHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90",
            "b2J1Zi93cmFwcGVycy5wcm90bxoUY2FsbGJhY2tfaW5wdXQucHJvdG8aC2Fj",
            "czEzLnByb3RvGhNyZWNlaXB0X21ha2VyLnByb3RvIpACCg9Jbml0aWFsaXpl",
            "SW5wdXQSLgoXb3JhY2xlX2NvbnRyYWN0X2FkZHJlc3MYASABKAsyDS5hZWxm",
            "LkFkZHJlc3MSPAolbWVya2xlX3RyZWVfcmVjb3JkZXJfY29udHJhY3RfYWRk",
            "cmVzcxgCIAEoCzINLmFlbGYuQWRkcmVzcxIwChlyZWdpbWVudF9jb250cmFj",
            "dF9hZGRyZXNzGAMgASgLMg0uYWVsZi5BZGRyZXNzEj0KJm1lcmtsZV90cmVl",
            "X2dlbmVyYXRvcl9jb250cmFjdF9hZGRyZXNzGAQgASgLMg0uYWVsZi5BZGRy",
            "ZXNzEh4KFm1lcmtsZV90cmVlX2xlYWZfbGltaXQYBSABKAUiuAEKD0NyZWF0",
            "ZVN3YXBJbnB1dBIhChlvcmlnaW5fdG9rZW5fc2l6ZV9pbl9ieXRlGAEgASgF",
            "EicKH29yaWdpbl90b2tlbl9udW1lcmljX2JpZ19lbmRpYW4YAiABKAgSMAoW",
            "c3dhcF90YXJnZXRfdG9rZW5fbGlzdBgDIAMoCzIQLlN3YXBUYXJnZXRUb2tl",
            "bhInChByZWdpbWVudF9hZGRyZXNzGAQgASgLMg0uYWVsZi5BZGRyZXNzImYK",
            "D1N3YXBUYXJnZXRUb2tlbhIbChN0YXJnZXRfdG9rZW5fc3ltYm9sGAEgASgJ",
            "Eh4KCnN3YXBfcmF0aW8YAiABKAsyCi5Td2FwUmF0aW8SFgoOZGVwb3NpdF9h",
            "bW91bnQYAyABKAMiugIKCFN3YXBJbmZvEhsKB3N3YXBfaWQYASABKAsyCi5h",
            "ZWxmLkhhc2gSIQoZb3JpZ2luX3Rva2VuX3NpemVfaW5fYnl0ZRgCIAEoBRIn",
            "Ch9vcmlnaW5fdG9rZW5fbnVtZXJpY19iaWdfZW5kaWFuGAMgASgIEkAKFXN3",
            "YXBfdGFyZ2V0X3Rva2VuX21hcBgEIAMoCzIhLlN3YXBJbmZvLlN3YXBUYXJn",
            "ZXRUb2tlbk1hcEVudHJ5EicKEHJlZ2ltZW50X2FkZHJlc3MYBSABKAsyDS5h",
            "ZWxmLkFkZHJlc3MSEwoLcmVjb3JkZXJfaWQYBiABKAMaRQoXU3dhcFRhcmdl",
            "dFRva2VuTWFwRW50cnkSCwoDa2V5GAEgASgJEhkKBXZhbHVlGAIgASgLMgou",
            "YWVsZi5IYXNoOgI4ASL3AQoIU3dhcFBhaXISGwoHc3dhcF9pZBgBIAEoCzIK",
            "LmFlbGYuSGFzaBIhChlvcmlnaW5fdG9rZW5fc2l6ZV9pbl9ieXRlGAIgASgF",
            "EicKH29yaWdpbl90b2tlbl9udW1lcmljX2JpZ19lbmRpYW4YAyABKAgSGwoT",
            "dGFyZ2V0X3Rva2VuX3N5bWJvbBgEIAEoCRIeCgpzd2FwX3JhdGlvGAUgASgL",
            "MgouU3dhcFJhdGlvEhYKDnN3YXBwZWRfYW1vdW50GAYgASgDEhUKDXN3YXBw",
            "ZWRfdGltZXMYByABKAMSFgoOZGVwb3NpdF9hbW91bnQYCCABKAMiNwoJU3dh",
            "cFJhdGlvEhQKDG9yaWdpbl9zaGFyZRgBIAEoAxIUCgx0YXJnZXRfc2hhcmUY",
            "AiABKAMicAoUQ2hhbmdlU3dhcFJhdGlvSW5wdXQSGwoHc3dhcF9pZBgBIAEo",
            "CzIKLmFlbGYuSGFzaBIeCgpzd2FwX3JhdGlvGAIgASgLMgouU3dhcFJhdGlv",
            "EhsKE3RhcmdldF90b2tlbl9zeW1ib2wYAyABKAkiWAoOU3dhcFRva2VuSW5w",
            "dXQSGwoHc3dhcF9pZBgBIAEoCzIKLmFlbGYuSGFzaBISCgpyZWNlaXB0X2lk",
            "GAIgASgDEhUKDW9yaWdpbl9hbW91bnQYAyABKAkiWAoMRGVwb3NpdElucHV0",
            "EhsKB3N3YXBfaWQYASABKAsyCi5hZWxmLkhhc2gSGwoTdGFyZ2V0X3Rva2Vu",
            "X3N5bWJvbBgCIAEoCRIOCgZhbW91bnQYAyABKAMiTAoQR2V0U3dhcFBhaXJJ",
            "bnB1dBIbCgdzd2FwX2lkGAEgASgLMgouYWVsZi5IYXNoEhsKE3RhcmdldF90",
            "b2tlbl9zeW1ib2wYAiABKAkiRgoTR2V0U3dhcEFtb3VudHNJbnB1dBIbCgdz",
            "d2FwX2lkGAEgASgLMgouYWVsZi5IYXNoEhIKCnJlY2VpcHRfaWQYAiABKAMi",
            "owEKC1N3YXBBbW91bnRzEh8KCHJlY2VpdmVyGAEgASgLMg0uYWVsZi5BZGRy",
            "ZXNzEjsKEHJlY2VpdmVkX2Ftb3VudHMYAiADKAsyIS5Td2FwQW1vdW50cy5S",
            "ZWNlaXZlZEFtb3VudHNFbnRyeRo2ChRSZWNlaXZlZEFtb3VudHNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIlkKDVdpdGhkcmF3SW5w",
            "dXQSGwoHc3dhcF9pZBgBIAEoCzIKLmFlbGYuSGFzaBIbChN0YXJnZXRfdG9r",
            "ZW5fc3ltYm9sGAIgASgJEg4KBmFtb3VudBgDIAEoAyJ+Cg5SZWNlaXB0SGFz",
            "aE1hcBIpCgV2YWx1ZRgBIAMoCzIaLlJlY2VpcHRIYXNoTWFwLlZhbHVlRW50",
            "cnkSEwoLcmVjb3JkZXJfaWQYAiABKAMaLAoKVmFsdWVFbnRyeRILCgNrZXkY",
            "ASABKAMSDQoFdmFsdWUYAiABKAk6AjgBIlUKFVVwZGF0ZU1lcmtsZVRyZWVJ",
            "bnB1dBITCgtyZWNvcmRlcl9pZBgBIAEoAxInChByZWdpbWVudF9hZGRyZXNz",
            "GAIgASgLMg0uYWVsZi5BZGRyZXNzInYKEFN3YXBSYXRpb0NoYW5nZWQSGwoH",
            "c3dhcF9pZBgBIAEoCzIKLmFlbGYuSGFzaBIiCg5uZXdfc3dhcF9yYXRpbxgC",
            "IAEoCzIKLlN3YXBSYXRpbxIbChN0YXJnZXRfdG9rZW5fc3ltYm9sGAMgASgJ",
            "OgSguxgBIlQKDFRva2VuU3dhcHBlZBIeCgdhZGRyZXNzGAEgASgLMg0uYWVs",
            "Zi5BZGRyZXNzEg4KBmFtb3VudBgCIAEoAxIOCgZzeW1ib2wYAyABKAk6BKC7",
            "GAEiMgoNU3dhcFBhaXJBZGRlZBIbCgdzd2FwX2lkGAEgASgLMgouYWVsZi5I",
            "YXNoOgSguxgBMtkFCg5CcmlkZ2VDb250cmFjdBI4CgpJbml0aWFsaXplEhAu",
            "SW5pdGlhbGl6ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASLAoK",
            "Q3JlYXRlU3dhcBIQLkNyZWF0ZVN3YXBJbnB1dBoKLmFlbGYuSGFzaCIAEjYK",
            "CVN3YXBUb2tlbhIPLlN3YXBUb2tlbklucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASQgoPQ2hhbmdlU3dhcFJhdGlvEhUuQ2hhbmdlU3dhcFJhdGlv",
            "SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIyCgdEZXBvc2l0Eg0u",
            "RGVwb3NpdElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNAoIV2l0",
            "aGRyYXcSDi5XaXRoZHJhd0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASRAoQVXBkYXRlTWVya2xlVHJlZRIWLlVwZGF0ZU1lcmtsZVRyZWVJbnB1",
            "dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEj0KEVJlY29yZFJlY2VpcHRI",
            "YXNoEg4uQ2FsbGJhY2tJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EisKC0dldFN3YXBJbmZvEgouYWVsZi5IYXNoGgkuU3dhcEluZm8iBYiJ9wEB",
            "EjIKC0dldFN3YXBQYWlyEhEuR2V0U3dhcFBhaXJJbnB1dBoJLlN3YXBQYWly",
            "IgWIifcBARI7Cg5HZXRTd2FwQW1vdW50cxIULkdldFN3YXBBbW91bnRzSW5w",
            "dXQaDC5Td2FwQW1vdW50cyIFiIn3AQEaVrLM9gEpQUVsZi5Db250cmFjdHMu",
            "QnJpZGdlLkJyaWRnZUNvbnRyYWN0U3RhdGXKyvYBC2FjczEzLnByb3Rvysr2",
            "ARNyZWNlaXB0X21ha2VyLnByb3RvQhiqAhVBRWxmLkNvbnRyYWN0cy5Ccmlk",
            "Z2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::CallbackInputReflection.Descriptor, global::AElf.Standards.ACS13.Acs13Reflection.Descriptor, global::AElf.Contracts.ReceiptMakerContract.ReceiptMakerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.InitializeInput), global::AElf.Contracts.Bridge.InitializeInput.Parser, new[]{ "OracleContractAddress", "MerkleTreeRecorderContractAddress", "RegimentContractAddress", "MerkleTreeGeneratorContractAddress", "MerkleTreeLeafLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.CreateSwapInput), global::AElf.Contracts.Bridge.CreateSwapInput.Parser, new[]{ "OriginTokenSizeInByte", "OriginTokenNumericBigEndian", "SwapTargetTokenList", "RegimentAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapTargetToken), global::AElf.Contracts.Bridge.SwapTargetToken.Parser, new[]{ "TargetTokenSymbol", "SwapRatio", "DepositAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapInfo), global::AElf.Contracts.Bridge.SwapInfo.Parser, new[]{ "SwapId", "OriginTokenSizeInByte", "OriginTokenNumericBigEndian", "SwapTargetTokenMap", "RegimentAddress", "RecorderId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapPair), global::AElf.Contracts.Bridge.SwapPair.Parser, new[]{ "SwapId", "OriginTokenSizeInByte", "OriginTokenNumericBigEndian", "TargetTokenSymbol", "SwapRatio", "SwappedAmount", "SwappedTimes", "DepositAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapRatio), global::AElf.Contracts.Bridge.SwapRatio.Parser, new[]{ "OriginShare", "TargetShare" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.ChangeSwapRatioInput), global::AElf.Contracts.Bridge.ChangeSwapRatioInput.Parser, new[]{ "SwapId", "SwapRatio", "TargetTokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapTokenInput), global::AElf.Contracts.Bridge.SwapTokenInput.Parser, new[]{ "SwapId", "ReceiptId", "OriginAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.DepositInput), global::AElf.Contracts.Bridge.DepositInput.Parser, new[]{ "SwapId", "TargetTokenSymbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.GetSwapPairInput), global::AElf.Contracts.Bridge.GetSwapPairInput.Parser, new[]{ "SwapId", "TargetTokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.GetSwapAmountsInput), global::AElf.Contracts.Bridge.GetSwapAmountsInput.Parser, new[]{ "SwapId", "ReceiptId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapAmounts), global::AElf.Contracts.Bridge.SwapAmounts.Parser, new[]{ "Receiver", "ReceivedAmounts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.WithdrawInput), global::AElf.Contracts.Bridge.WithdrawInput.Parser, new[]{ "SwapId", "TargetTokenSymbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.ReceiptHashMap), global::AElf.Contracts.Bridge.ReceiptHashMap.Parser, new[]{ "Value", "RecorderId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.UpdateMerkleTreeInput), global::AElf.Contracts.Bridge.UpdateMerkleTreeInput.Parser, new[]{ "RecorderId", "RegimentAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapRatioChanged), global::AElf.Contracts.Bridge.SwapRatioChanged.Parser, new[]{ "SwapId", "NewSwapRatio", "TargetTokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.TokenSwapped), global::AElf.Contracts.Bridge.TokenSwapped.Parser, new[]{ "Address", "Amount", "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Bridge.SwapPairAdded), global::AElf.Contracts.Bridge.SwapPairAdded.Parser, new[]{ "SwapId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      oracleContractAddress_ = other.oracleContractAddress_ != null ? other.oracleContractAddress_.Clone() : null;
      merkleTreeRecorderContractAddress_ = other.merkleTreeRecorderContractAddress_ != null ? other.merkleTreeRecorderContractAddress_.Clone() : null;
      regimentContractAddress_ = other.regimentContractAddress_ != null ? other.regimentContractAddress_.Clone() : null;
      merkleTreeGeneratorContractAddress_ = other.merkleTreeGeneratorContractAddress_ != null ? other.merkleTreeGeneratorContractAddress_.Clone() : null;
      merkleTreeLeafLimit_ = other.merkleTreeLeafLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "oracle_contract_address" field.</summary>
    public const int OracleContractAddressFieldNumber = 1;
    private global::AElf.Types.Address oracleContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleContractAddress {
      get { return oracleContractAddress_; }
      set {
        oracleContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "merkle_tree_recorder_contract_address" field.</summary>
    public const int MerkleTreeRecorderContractAddressFieldNumber = 2;
    private global::AElf.Types.Address merkleTreeRecorderContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address MerkleTreeRecorderContractAddress {
      get { return merkleTreeRecorderContractAddress_; }
      set {
        merkleTreeRecorderContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "regiment_contract_address" field.</summary>
    public const int RegimentContractAddressFieldNumber = 3;
    private global::AElf.Types.Address regimentContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address RegimentContractAddress {
      get { return regimentContractAddress_; }
      set {
        regimentContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "merkle_tree_generator_contract_address" field.</summary>
    public const int MerkleTreeGeneratorContractAddressFieldNumber = 4;
    private global::AElf.Types.Address merkleTreeGeneratorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address MerkleTreeGeneratorContractAddress {
      get { return merkleTreeGeneratorContractAddress_; }
      set {
        merkleTreeGeneratorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "merkle_tree_leaf_limit" field.</summary>
    public const int MerkleTreeLeafLimitFieldNumber = 5;
    private int merkleTreeLeafLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MerkleTreeLeafLimit {
      get { return merkleTreeLeafLimit_; }
      set {
        merkleTreeLeafLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OracleContractAddress, other.OracleContractAddress)) return false;
      if (!object.Equals(MerkleTreeRecorderContractAddress, other.MerkleTreeRecorderContractAddress)) return false;
      if (!object.Equals(RegimentContractAddress, other.RegimentContractAddress)) return false;
      if (!object.Equals(MerkleTreeGeneratorContractAddress, other.MerkleTreeGeneratorContractAddress)) return false;
      if (MerkleTreeLeafLimit != other.MerkleTreeLeafLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oracleContractAddress_ != null) hash ^= OracleContractAddress.GetHashCode();
      if (merkleTreeRecorderContractAddress_ != null) hash ^= MerkleTreeRecorderContractAddress.GetHashCode();
      if (regimentContractAddress_ != null) hash ^= RegimentContractAddress.GetHashCode();
      if (merkleTreeGeneratorContractAddress_ != null) hash ^= MerkleTreeGeneratorContractAddress.GetHashCode();
      if (MerkleTreeLeafLimit != 0) hash ^= MerkleTreeLeafLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oracleContractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleContractAddress);
      }
      if (merkleTreeRecorderContractAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MerkleTreeRecorderContractAddress);
      }
      if (regimentContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RegimentContractAddress);
      }
      if (merkleTreeGeneratorContractAddress_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerkleTreeGeneratorContractAddress);
      }
      if (MerkleTreeLeafLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MerkleTreeLeafLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oracleContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleContractAddress);
      }
      if (merkleTreeRecorderContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerkleTreeRecorderContractAddress);
      }
      if (regimentContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegimentContractAddress);
      }
      if (merkleTreeGeneratorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerkleTreeGeneratorContractAddress);
      }
      if (MerkleTreeLeafLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MerkleTreeLeafLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.oracleContractAddress_ != null) {
        if (oracleContractAddress_ == null) {
          OracleContractAddress = new global::AElf.Types.Address();
        }
        OracleContractAddress.MergeFrom(other.OracleContractAddress);
      }
      if (other.merkleTreeRecorderContractAddress_ != null) {
        if (merkleTreeRecorderContractAddress_ == null) {
          MerkleTreeRecorderContractAddress = new global::AElf.Types.Address();
        }
        MerkleTreeRecorderContractAddress.MergeFrom(other.MerkleTreeRecorderContractAddress);
      }
      if (other.regimentContractAddress_ != null) {
        if (regimentContractAddress_ == null) {
          RegimentContractAddress = new global::AElf.Types.Address();
        }
        RegimentContractAddress.MergeFrom(other.RegimentContractAddress);
      }
      if (other.merkleTreeGeneratorContractAddress_ != null) {
        if (merkleTreeGeneratorContractAddress_ == null) {
          MerkleTreeGeneratorContractAddress = new global::AElf.Types.Address();
        }
        MerkleTreeGeneratorContractAddress.MergeFrom(other.MerkleTreeGeneratorContractAddress);
      }
      if (other.MerkleTreeLeafLimit != 0) {
        MerkleTreeLeafLimit = other.MerkleTreeLeafLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oracleContractAddress_ == null) {
              OracleContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleContractAddress);
            break;
          }
          case 18: {
            if (merkleTreeRecorderContractAddress_ == null) {
              MerkleTreeRecorderContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(MerkleTreeRecorderContractAddress);
            break;
          }
          case 26: {
            if (regimentContractAddress_ == null) {
              RegimentContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(RegimentContractAddress);
            break;
          }
          case 34: {
            if (merkleTreeGeneratorContractAddress_ == null) {
              MerkleTreeGeneratorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(MerkleTreeGeneratorContractAddress);
            break;
          }
          case 40: {
            MerkleTreeLeafLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateSwapInput : pb::IMessage<CreateSwapInput> {
    private static readonly pb::MessageParser<CreateSwapInput> _parser = new pb::MessageParser<CreateSwapInput>(() => new CreateSwapInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSwapInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSwapInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSwapInput(CreateSwapInput other) : this() {
      originTokenSizeInByte_ = other.originTokenSizeInByte_;
      originTokenNumericBigEndian_ = other.originTokenNumericBigEndian_;
      swapTargetTokenList_ = other.swapTargetTokenList_.Clone();
      regimentAddress_ = other.regimentAddress_ != null ? other.regimentAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSwapInput Clone() {
      return new CreateSwapInput(this);
    }

    /// <summary>Field number for the "origin_token_size_in_byte" field.</summary>
    public const int OriginTokenSizeInByteFieldNumber = 1;
    private int originTokenSizeInByte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginTokenSizeInByte {
      get { return originTokenSizeInByte_; }
      set {
        originTokenSizeInByte_ = value;
      }
    }

    /// <summary>Field number for the "origin_token_numeric_big_endian" field.</summary>
    public const int OriginTokenNumericBigEndianFieldNumber = 2;
    private bool originTokenNumericBigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OriginTokenNumericBigEndian {
      get { return originTokenNumericBigEndian_; }
      set {
        originTokenNumericBigEndian_ = value;
      }
    }

    /// <summary>Field number for the "swap_target_token_list" field.</summary>
    public const int SwapTargetTokenListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Bridge.SwapTargetToken> _repeated_swapTargetTokenList_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Contracts.Bridge.SwapTargetToken.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Bridge.SwapTargetToken> swapTargetTokenList_ = new pbc::RepeatedField<global::AElf.Contracts.Bridge.SwapTargetToken>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Bridge.SwapTargetToken> SwapTargetTokenList {
      get { return swapTargetTokenList_; }
    }

    /// <summary>Field number for the "regiment_address" field.</summary>
    public const int RegimentAddressFieldNumber = 4;
    private global::AElf.Types.Address regimentAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address RegimentAddress {
      get { return regimentAddress_; }
      set {
        regimentAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSwapInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSwapInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginTokenSizeInByte != other.OriginTokenSizeInByte) return false;
      if (OriginTokenNumericBigEndian != other.OriginTokenNumericBigEndian) return false;
      if(!swapTargetTokenList_.Equals(other.swapTargetTokenList_)) return false;
      if (!object.Equals(RegimentAddress, other.RegimentAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginTokenSizeInByte != 0) hash ^= OriginTokenSizeInByte.GetHashCode();
      if (OriginTokenNumericBigEndian != false) hash ^= OriginTokenNumericBigEndian.GetHashCode();
      hash ^= swapTargetTokenList_.GetHashCode();
      if (regimentAddress_ != null) hash ^= RegimentAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginTokenSizeInByte != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OriginTokenSizeInByte);
      }
      if (OriginTokenNumericBigEndian != false) {
        output.WriteRawTag(16);
        output.WriteBool(OriginTokenNumericBigEndian);
      }
      swapTargetTokenList_.WriteTo(output, _repeated_swapTargetTokenList_codec);
      if (regimentAddress_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RegimentAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginTokenSizeInByte != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginTokenSizeInByte);
      }
      if (OriginTokenNumericBigEndian != false) {
        size += 1 + 1;
      }
      size += swapTargetTokenList_.CalculateSize(_repeated_swapTargetTokenList_codec);
      if (regimentAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegimentAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSwapInput other) {
      if (other == null) {
        return;
      }
      if (other.OriginTokenSizeInByte != 0) {
        OriginTokenSizeInByte = other.OriginTokenSizeInByte;
      }
      if (other.OriginTokenNumericBigEndian != false) {
        OriginTokenNumericBigEndian = other.OriginTokenNumericBigEndian;
      }
      swapTargetTokenList_.Add(other.swapTargetTokenList_);
      if (other.regimentAddress_ != null) {
        if (regimentAddress_ == null) {
          RegimentAddress = new global::AElf.Types.Address();
        }
        RegimentAddress.MergeFrom(other.RegimentAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginTokenSizeInByte = input.ReadInt32();
            break;
          }
          case 16: {
            OriginTokenNumericBigEndian = input.ReadBool();
            break;
          }
          case 26: {
            swapTargetTokenList_.AddEntriesFrom(input, _repeated_swapTargetTokenList_codec);
            break;
          }
          case 34: {
            if (regimentAddress_ == null) {
              RegimentAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(RegimentAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapTargetToken : pb::IMessage<SwapTargetToken> {
    private static readonly pb::MessageParser<SwapTargetToken> _parser = new pb::MessageParser<SwapTargetToken>(() => new SwapTargetToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapTargetToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTargetToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTargetToken(SwapTargetToken other) : this() {
      targetTokenSymbol_ = other.targetTokenSymbol_;
      swapRatio_ = other.swapRatio_ != null ? other.swapRatio_.Clone() : null;
      depositAmount_ = other.depositAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTargetToken Clone() {
      return new SwapTargetToken(this);
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 1;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "swap_ratio" field.</summary>
    public const int SwapRatioFieldNumber = 2;
    private global::AElf.Contracts.Bridge.SwapRatio swapRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Bridge.SwapRatio SwapRatio {
      get { return swapRatio_; }
      set {
        swapRatio_ = value;
      }
    }

    /// <summary>Field number for the "deposit_amount" field.</summary>
    public const int DepositAmountFieldNumber = 3;
    private long depositAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepositAmount {
      get { return depositAmount_; }
      set {
        depositAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapTargetToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapTargetToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (!object.Equals(SwapRatio, other.SwapRatio)) return false;
      if (DepositAmount != other.DepositAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (swapRatio_ != null) hash ^= SwapRatio.GetHashCode();
      if (DepositAmount != 0L) hash ^= DepositAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetTokenSymbol);
      }
      if (swapRatio_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SwapRatio);
      }
      if (DepositAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DepositAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (swapRatio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapRatio);
      }
      if (DepositAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepositAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapTargetToken other) {
      if (other == null) {
        return;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.swapRatio_ != null) {
        if (swapRatio_ == null) {
          SwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
        }
        SwapRatio.MergeFrom(other.SwapRatio);
      }
      if (other.DepositAmount != 0L) {
        DepositAmount = other.DepositAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (swapRatio_ == null) {
              SwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
            }
            input.ReadMessage(SwapRatio);
            break;
          }
          case 24: {
            DepositAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapInfo : pb::IMessage<SwapInfo> {
    private static readonly pb::MessageParser<SwapInfo> _parser = new pb::MessageParser<SwapInfo>(() => new SwapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapInfo(SwapInfo other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      originTokenSizeInByte_ = other.originTokenSizeInByte_;
      originTokenNumericBigEndian_ = other.originTokenNumericBigEndian_;
      swapTargetTokenMap_ = other.swapTargetTokenMap_.Clone();
      regimentAddress_ = other.regimentAddress_ != null ? other.regimentAddress_.Clone() : null;
      recorderId_ = other.recorderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapInfo Clone() {
      return new SwapInfo(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "origin_token_size_in_byte" field.</summary>
    public const int OriginTokenSizeInByteFieldNumber = 2;
    private int originTokenSizeInByte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginTokenSizeInByte {
      get { return originTokenSizeInByte_; }
      set {
        originTokenSizeInByte_ = value;
      }
    }

    /// <summary>Field number for the "origin_token_numeric_big_endian" field.</summary>
    public const int OriginTokenNumericBigEndianFieldNumber = 3;
    private bool originTokenNumericBigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OriginTokenNumericBigEndian {
      get { return originTokenNumericBigEndian_; }
      set {
        originTokenNumericBigEndian_ = value;
      }
    }

    /// <summary>Field number for the "swap_target_token_map" field.</summary>
    public const int SwapTargetTokenMapFieldNumber = 4;
    private static readonly pbc::MapField<string, global::AElf.Types.Hash>.Codec _map_swapTargetTokenMap_codec
        = new pbc::MapField<string, global::AElf.Types.Hash>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::AElf.Types.Hash.Parser), 34);
    private readonly pbc::MapField<string, global::AElf.Types.Hash> swapTargetTokenMap_ = new pbc::MapField<string, global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Types.Hash> SwapTargetTokenMap {
      get { return swapTargetTokenMap_; }
    }

    /// <summary>Field number for the "regiment_address" field.</summary>
    public const int RegimentAddressFieldNumber = 5;
    private global::AElf.Types.Address regimentAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address RegimentAddress {
      get { return regimentAddress_; }
      set {
        regimentAddress_ = value;
      }
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 6;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (OriginTokenSizeInByte != other.OriginTokenSizeInByte) return false;
      if (OriginTokenNumericBigEndian != other.OriginTokenNumericBigEndian) return false;
      if (!SwapTargetTokenMap.Equals(other.SwapTargetTokenMap)) return false;
      if (!object.Equals(RegimentAddress, other.RegimentAddress)) return false;
      if (RecorderId != other.RecorderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (OriginTokenSizeInByte != 0) hash ^= OriginTokenSizeInByte.GetHashCode();
      if (OriginTokenNumericBigEndian != false) hash ^= OriginTokenNumericBigEndian.GetHashCode();
      hash ^= SwapTargetTokenMap.GetHashCode();
      if (regimentAddress_ != null) hash ^= RegimentAddress.GetHashCode();
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (OriginTokenSizeInByte != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginTokenSizeInByte);
      }
      if (OriginTokenNumericBigEndian != false) {
        output.WriteRawTag(24);
        output.WriteBool(OriginTokenNumericBigEndian);
      }
      swapTargetTokenMap_.WriteTo(output, _map_swapTargetTokenMap_codec);
      if (regimentAddress_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RegimentAddress);
      }
      if (RecorderId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RecorderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (OriginTokenSizeInByte != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginTokenSizeInByte);
      }
      if (OriginTokenNumericBigEndian != false) {
        size += 1 + 1;
      }
      size += swapTargetTokenMap_.CalculateSize(_map_swapTargetTokenMap_codec);
      if (regimentAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegimentAddress);
      }
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapInfo other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.OriginTokenSizeInByte != 0) {
        OriginTokenSizeInByte = other.OriginTokenSizeInByte;
      }
      if (other.OriginTokenNumericBigEndian != false) {
        OriginTokenNumericBigEndian = other.OriginTokenNumericBigEndian;
      }
      swapTargetTokenMap_.Add(other.swapTargetTokenMap_);
      if (other.regimentAddress_ != null) {
        if (regimentAddress_ == null) {
          RegimentAddress = new global::AElf.Types.Address();
        }
        RegimentAddress.MergeFrom(other.RegimentAddress);
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 16: {
            OriginTokenSizeInByte = input.ReadInt32();
            break;
          }
          case 24: {
            OriginTokenNumericBigEndian = input.ReadBool();
            break;
          }
          case 34: {
            swapTargetTokenMap_.AddEntriesFrom(input, _map_swapTargetTokenMap_codec);
            break;
          }
          case 42: {
            if (regimentAddress_ == null) {
              RegimentAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(RegimentAddress);
            break;
          }
          case 48: {
            RecorderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapPair : pb::IMessage<SwapPair> {
    private static readonly pb::MessageParser<SwapPair> _parser = new pb::MessageParser<SwapPair>(() => new SwapPair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapPair(SwapPair other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      originTokenSizeInByte_ = other.originTokenSizeInByte_;
      originTokenNumericBigEndian_ = other.originTokenNumericBigEndian_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      swapRatio_ = other.swapRatio_ != null ? other.swapRatio_.Clone() : null;
      swappedAmount_ = other.swappedAmount_;
      swappedTimes_ = other.swappedTimes_;
      depositAmount_ = other.depositAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapPair Clone() {
      return new SwapPair(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "origin_token_size_in_byte" field.</summary>
    public const int OriginTokenSizeInByteFieldNumber = 2;
    private int originTokenSizeInByte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginTokenSizeInByte {
      get { return originTokenSizeInByte_; }
      set {
        originTokenSizeInByte_ = value;
      }
    }

    /// <summary>Field number for the "origin_token_numeric_big_endian" field.</summary>
    public const int OriginTokenNumericBigEndianFieldNumber = 3;
    private bool originTokenNumericBigEndian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OriginTokenNumericBigEndian {
      get { return originTokenNumericBigEndian_; }
      set {
        originTokenNumericBigEndian_ = value;
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 4;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "swap_ratio" field.</summary>
    public const int SwapRatioFieldNumber = 5;
    private global::AElf.Contracts.Bridge.SwapRatio swapRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Bridge.SwapRatio SwapRatio {
      get { return swapRatio_; }
      set {
        swapRatio_ = value;
      }
    }

    /// <summary>Field number for the "swapped_amount" field.</summary>
    public const int SwappedAmountFieldNumber = 6;
    private long swappedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SwappedAmount {
      get { return swappedAmount_; }
      set {
        swappedAmount_ = value;
      }
    }

    /// <summary>Field number for the "swapped_times" field.</summary>
    public const int SwappedTimesFieldNumber = 7;
    private long swappedTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SwappedTimes {
      get { return swappedTimes_; }
      set {
        swappedTimes_ = value;
      }
    }

    /// <summary>Field number for the "deposit_amount" field.</summary>
    public const int DepositAmountFieldNumber = 8;
    private long depositAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DepositAmount {
      get { return depositAmount_; }
      set {
        depositAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (OriginTokenSizeInByte != other.OriginTokenSizeInByte) return false;
      if (OriginTokenNumericBigEndian != other.OriginTokenNumericBigEndian) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (!object.Equals(SwapRatio, other.SwapRatio)) return false;
      if (SwappedAmount != other.SwappedAmount) return false;
      if (SwappedTimes != other.SwappedTimes) return false;
      if (DepositAmount != other.DepositAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (OriginTokenSizeInByte != 0) hash ^= OriginTokenSizeInByte.GetHashCode();
      if (OriginTokenNumericBigEndian != false) hash ^= OriginTokenNumericBigEndian.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (swapRatio_ != null) hash ^= SwapRatio.GetHashCode();
      if (SwappedAmount != 0L) hash ^= SwappedAmount.GetHashCode();
      if (SwappedTimes != 0L) hash ^= SwappedTimes.GetHashCode();
      if (DepositAmount != 0L) hash ^= DepositAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (OriginTokenSizeInByte != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginTokenSizeInByte);
      }
      if (OriginTokenNumericBigEndian != false) {
        output.WriteRawTag(24);
        output.WriteBool(OriginTokenNumericBigEndian);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TargetTokenSymbol);
      }
      if (swapRatio_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SwapRatio);
      }
      if (SwappedAmount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SwappedAmount);
      }
      if (SwappedTimes != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SwappedTimes);
      }
      if (DepositAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(DepositAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (OriginTokenSizeInByte != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginTokenSizeInByte);
      }
      if (OriginTokenNumericBigEndian != false) {
        size += 1 + 1;
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (swapRatio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapRatio);
      }
      if (SwappedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwappedAmount);
      }
      if (SwappedTimes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwappedTimes);
      }
      if (DepositAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepositAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapPair other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.OriginTokenSizeInByte != 0) {
        OriginTokenSizeInByte = other.OriginTokenSizeInByte;
      }
      if (other.OriginTokenNumericBigEndian != false) {
        OriginTokenNumericBigEndian = other.OriginTokenNumericBigEndian;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.swapRatio_ != null) {
        if (swapRatio_ == null) {
          SwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
        }
        SwapRatio.MergeFrom(other.SwapRatio);
      }
      if (other.SwappedAmount != 0L) {
        SwappedAmount = other.SwappedAmount;
      }
      if (other.SwappedTimes != 0L) {
        SwappedTimes = other.SwappedTimes;
      }
      if (other.DepositAmount != 0L) {
        DepositAmount = other.DepositAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 16: {
            OriginTokenSizeInByte = input.ReadInt32();
            break;
          }
          case 24: {
            OriginTokenNumericBigEndian = input.ReadBool();
            break;
          }
          case 34: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 42: {
            if (swapRatio_ == null) {
              SwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
            }
            input.ReadMessage(SwapRatio);
            break;
          }
          case 48: {
            SwappedAmount = input.ReadInt64();
            break;
          }
          case 56: {
            SwappedTimes = input.ReadInt64();
            break;
          }
          case 64: {
            DepositAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapRatio : pb::IMessage<SwapRatio> {
    private static readonly pb::MessageParser<SwapRatio> _parser = new pb::MessageParser<SwapRatio>(() => new SwapRatio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapRatio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapRatio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapRatio(SwapRatio other) : this() {
      originShare_ = other.originShare_;
      targetShare_ = other.targetShare_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapRatio Clone() {
      return new SwapRatio(this);
    }

    /// <summary>Field number for the "origin_share" field.</summary>
    public const int OriginShareFieldNumber = 1;
    private long originShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OriginShare {
      get { return originShare_; }
      set {
        originShare_ = value;
      }
    }

    /// <summary>Field number for the "target_share" field.</summary>
    public const int TargetShareFieldNumber = 2;
    private long targetShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetShare {
      get { return targetShare_; }
      set {
        targetShare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapRatio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapRatio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginShare != other.OriginShare) return false;
      if (TargetShare != other.TargetShare) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginShare != 0L) hash ^= OriginShare.GetHashCode();
      if (TargetShare != 0L) hash ^= TargetShare.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginShare != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OriginShare);
      }
      if (TargetShare != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetShare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginShare != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OriginShare);
      }
      if (TargetShare != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetShare);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapRatio other) {
      if (other == null) {
        return;
      }
      if (other.OriginShare != 0L) {
        OriginShare = other.OriginShare;
      }
      if (other.TargetShare != 0L) {
        TargetShare = other.TargetShare;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginShare = input.ReadInt64();
            break;
          }
          case 16: {
            TargetShare = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeSwapRatioInput : pb::IMessage<ChangeSwapRatioInput> {
    private static readonly pb::MessageParser<ChangeSwapRatioInput> _parser = new pb::MessageParser<ChangeSwapRatioInput>(() => new ChangeSwapRatioInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSwapRatioInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSwapRatioInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSwapRatioInput(ChangeSwapRatioInput other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      swapRatio_ = other.swapRatio_ != null ? other.swapRatio_.Clone() : null;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSwapRatioInput Clone() {
      return new ChangeSwapRatioInput(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "swap_ratio" field.</summary>
    public const int SwapRatioFieldNumber = 2;
    private global::AElf.Contracts.Bridge.SwapRatio swapRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Bridge.SwapRatio SwapRatio {
      get { return swapRatio_; }
      set {
        swapRatio_ = value;
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 3;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSwapRatioInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSwapRatioInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (!object.Equals(SwapRatio, other.SwapRatio)) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (swapRatio_ != null) hash ^= SwapRatio.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (swapRatio_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SwapRatio);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (swapRatio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapRatio);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSwapRatioInput other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.swapRatio_ != null) {
        if (swapRatio_ == null) {
          SwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
        }
        SwapRatio.MergeFrom(other.SwapRatio);
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 18: {
            if (swapRatio_ == null) {
              SwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
            }
            input.ReadMessage(SwapRatio);
            break;
          }
          case 26: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapTokenInput : pb::IMessage<SwapTokenInput> {
    private static readonly pb::MessageParser<SwapTokenInput> _parser = new pb::MessageParser<SwapTokenInput>(() => new SwapTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenInput(SwapTokenInput other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      receiptId_ = other.receiptId_;
      originAmount_ = other.originAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenInput Clone() {
      return new SwapTokenInput(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "receipt_id" field.</summary>
    public const int ReceiptIdFieldNumber = 2;
    private long receiptId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiptId {
      get { return receiptId_; }
      set {
        receiptId_ = value;
      }
    }

    /// <summary>Field number for the "origin_amount" field.</summary>
    public const int OriginAmountFieldNumber = 3;
    private string originAmount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginAmount {
      get { return originAmount_; }
      set {
        originAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (ReceiptId != other.ReceiptId) return false;
      if (OriginAmount != other.OriginAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (ReceiptId != 0L) hash ^= ReceiptId.GetHashCode();
      if (OriginAmount.Length != 0) hash ^= OriginAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (ReceiptId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReceiptId);
      }
      if (OriginAmount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OriginAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (ReceiptId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiptId);
      }
      if (OriginAmount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.ReceiptId != 0L) {
        ReceiptId = other.ReceiptId;
      }
      if (other.OriginAmount.Length != 0) {
        OriginAmount = other.OriginAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 16: {
            ReceiptId = input.ReadInt64();
            break;
          }
          case 26: {
            OriginAmount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepositInput : pb::IMessage<DepositInput> {
    private static readonly pb::MessageParser<DepositInput> _parser = new pb::MessageParser<DepositInput>(() => new DepositInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepositInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput(DepositInput other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput Clone() {
      return new DepositInput(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepositInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepositInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepositInput other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSwapPairInput : pb::IMessage<GetSwapPairInput> {
    private static readonly pb::MessageParser<GetSwapPairInput> _parser = new pb::MessageParser<GetSwapPairInput>(() => new GetSwapPairInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSwapPairInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapPairInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapPairInput(GetSwapPairInput other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapPairInput Clone() {
      return new GetSwapPairInput(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSwapPairInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSwapPairInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSwapPairInput other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSwapAmountsInput : pb::IMessage<GetSwapAmountsInput> {
    private static readonly pb::MessageParser<GetSwapAmountsInput> _parser = new pb::MessageParser<GetSwapAmountsInput>(() => new GetSwapAmountsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSwapAmountsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapAmountsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapAmountsInput(GetSwapAmountsInput other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      receiptId_ = other.receiptId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapAmountsInput Clone() {
      return new GetSwapAmountsInput(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "receipt_id" field.</summary>
    public const int ReceiptIdFieldNumber = 2;
    private long receiptId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiptId {
      get { return receiptId_; }
      set {
        receiptId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSwapAmountsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSwapAmountsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (ReceiptId != other.ReceiptId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (ReceiptId != 0L) hash ^= ReceiptId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (ReceiptId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReceiptId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (ReceiptId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiptId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSwapAmountsInput other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.ReceiptId != 0L) {
        ReceiptId = other.ReceiptId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 16: {
            ReceiptId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapAmounts : pb::IMessage<SwapAmounts> {
    private static readonly pb::MessageParser<SwapAmounts> _parser = new pb::MessageParser<SwapAmounts>(() => new SwapAmounts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapAmounts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapAmounts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapAmounts(SwapAmounts other) : this() {
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      receivedAmounts_ = other.receivedAmounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapAmounts Clone() {
      return new SwapAmounts(this);
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 1;
    private global::AElf.Types.Address receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "received_amounts" field.</summary>
    public const int ReceivedAmountsFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_receivedAmounts_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 18);
    private readonly pbc::MapField<string, long> receivedAmounts_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> ReceivedAmounts {
      get { return receivedAmounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapAmounts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapAmounts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Receiver, other.Receiver)) return false;
      if (!ReceivedAmounts.Equals(other.ReceivedAmounts)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      hash ^= ReceivedAmounts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (receiver_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Receiver);
      }
      receivedAmounts_.WriteTo(output, _map_receivedAmounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      size += receivedAmounts_.CalculateSize(_map_receivedAmounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapAmounts other) {
      if (other == null) {
        return;
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::AElf.Types.Address();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      receivedAmounts_.Add(other.receivedAmounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (receiver_ == null) {
              Receiver = new global::AElf.Types.Address();
            }
            input.ReadMessage(Receiver);
            break;
          }
          case 18: {
            receivedAmounts_.AddEntriesFrom(input, _map_receivedAmounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawInput : pb::IMessage<WithdrawInput> {
    private static readonly pb::MessageParser<WithdrawInput> _parser = new pb::MessageParser<WithdrawInput>(() => new WithdrawInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput(WithdrawInput other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput Clone() {
      return new WithdrawInput(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawInput other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiptHashMap : pb::IMessage<ReceiptHashMap> {
    private static readonly pb::MessageParser<ReceiptHashMap> _parser = new pb::MessageParser<ReceiptHashMap>(() => new ReceiptHashMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiptHashMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptHashMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptHashMap(ReceiptHashMap other) : this() {
      value_ = other.value_.Clone();
      recorderId_ = other.recorderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptHashMap Clone() {
      return new ReceiptHashMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<long, string>.Codec _map_value_codec
        = new pbc::MapField<long, string>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<long, string> value_ = new pbc::MapField<long, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, string> Value {
      get { return value_; }
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 2;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiptHashMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiptHashMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      if (RecorderId != other.RecorderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (RecorderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RecorderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiptHashMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
          case 16: {
            RecorderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateMerkleTreeInput : pb::IMessage<UpdateMerkleTreeInput> {
    private static readonly pb::MessageParser<UpdateMerkleTreeInput> _parser = new pb::MessageParser<UpdateMerkleTreeInput>(() => new UpdateMerkleTreeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateMerkleTreeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMerkleTreeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMerkleTreeInput(UpdateMerkleTreeInput other) : this() {
      recorderId_ = other.recorderId_;
      regimentAddress_ = other.regimentAddress_ != null ? other.regimentAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMerkleTreeInput Clone() {
      return new UpdateMerkleTreeInput(this);
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 1;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    /// <summary>Field number for the "regiment_address" field.</summary>
    public const int RegimentAddressFieldNumber = 2;
    private global::AElf.Types.Address regimentAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address RegimentAddress {
      get { return regimentAddress_; }
      set {
        regimentAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateMerkleTreeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateMerkleTreeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecorderId != other.RecorderId) return false;
      if (!object.Equals(RegimentAddress, other.RegimentAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (regimentAddress_ != null) hash ^= RegimentAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecorderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RecorderId);
      }
      if (regimentAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RegimentAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (regimentAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegimentAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateMerkleTreeInput other) {
      if (other == null) {
        return;
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      if (other.regimentAddress_ != null) {
        if (regimentAddress_ == null) {
          RegimentAddress = new global::AElf.Types.Address();
        }
        RegimentAddress.MergeFrom(other.RegimentAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecorderId = input.ReadInt64();
            break;
          }
          case 18: {
            if (regimentAddress_ == null) {
              RegimentAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(RegimentAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapRatioChanged : pb::IMessage<SwapRatioChanged> {
    private static readonly pb::MessageParser<SwapRatioChanged> _parser = new pb::MessageParser<SwapRatioChanged>(() => new SwapRatioChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapRatioChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapRatioChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapRatioChanged(SwapRatioChanged other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      newSwapRatio_ = other.newSwapRatio_ != null ? other.newSwapRatio_.Clone() : null;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapRatioChanged Clone() {
      return new SwapRatioChanged(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    /// <summary>Field number for the "new_swap_ratio" field.</summary>
    public const int NewSwapRatioFieldNumber = 2;
    private global::AElf.Contracts.Bridge.SwapRatio newSwapRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Bridge.SwapRatio NewSwapRatio {
      get { return newSwapRatio_; }
      set {
        newSwapRatio_ = value;
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 3;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapRatioChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapRatioChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      if (!object.Equals(NewSwapRatio, other.NewSwapRatio)) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (newSwapRatio_ != null) hash ^= NewSwapRatio.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (newSwapRatio_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewSwapRatio);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (newSwapRatio_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewSwapRatio);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapRatioChanged other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      if (other.newSwapRatio_ != null) {
        if (newSwapRatio_ == null) {
          NewSwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
        }
        NewSwapRatio.MergeFrom(other.NewSwapRatio);
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
          case 18: {
            if (newSwapRatio_ == null) {
              NewSwapRatio = new global::AElf.Contracts.Bridge.SwapRatio();
            }
            input.ReadMessage(NewSwapRatio);
            break;
          }
          case 26: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenSwapped : pb::IMessage<TokenSwapped> {
    private static readonly pb::MessageParser<TokenSwapped> _parser = new pb::MessageParser<TokenSwapped>(() => new TokenSwapped());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenSwapped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSwapped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSwapped(TokenSwapped other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      amount_ = other.amount_;
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSwapped Clone() {
      return new TokenSwapped(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenSwapped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenSwapped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Amount != other.Amount) return false;
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenSwapped other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapPairAdded : pb::IMessage<SwapPairAdded> {
    private static readonly pb::MessageParser<SwapPairAdded> _parser = new pb::MessageParser<SwapPairAdded>(() => new SwapPairAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapPairAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Bridge.BridgeContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapPairAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapPairAdded(SwapPairAdded other) : this() {
      swapId_ = other.swapId_ != null ? other.swapId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapPairAdded Clone() {
      return new SwapPairAdded(this);
    }

    /// <summary>Field number for the "swap_id" field.</summary>
    public const int SwapIdFieldNumber = 1;
    private global::AElf.Types.Hash swapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SwapId {
      get { return swapId_; }
      set {
        swapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapPairAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapPairAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SwapId, other.SwapId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (swapId_ != null) hash ^= SwapId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (swapId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SwapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (swapId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapPairAdded other) {
      if (other == null) {
        return;
      }
      if (other.swapId_ != null) {
        if (swapId_ == null) {
          SwapId = new global::AElf.Types.Hash();
        }
        SwapId.MergeFrom(other.SwapId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (swapId_ == null) {
              SwapId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SwapId);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
