// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: report_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Report {

  /// <summary>Holder for reflection information generated from report_contract.proto</summary>
  public static partial class ReportContractReflection {

    #region Descriptor
    /// <summary>File descriptor for report_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReportContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVyZXBvcnRfY29udHJhY3QucHJvdG8aD2FlbGYvY29yZS5wcm90bxoSYWVs",
            "Zi9vcHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90",
            "b2J1Zi93cmFwcGVycy5wcm90bxoUY2FsbGJhY2tfaW5wdXQucHJvdG8ipQEK",
            "D0luaXRpYWxpemVJbnB1dBIuChdvcmFjbGVfY29udHJhY3RfYWRkcmVzcxgB",
            "IAEoCzINLmFlbGYuQWRkcmVzcxISCgpyZXBvcnRfZmVlGAIgASgDEhoKEmFw",
            "cGx5X29ic2VydmVyX2ZlZRgDIAEoAxIyChtpbml0aWFsX3JlZ2lzdGVyX3do",
            "aXRlX2xpc3QYBCADKAsyDS5hZWxmLkFkZHJlc3MilwEKEFF1ZXJ5T3JhY2xl",
            "SW5wdXQSDwoHcGF5bWVudBgBIAEoAxINCgV0b2tlbhgCIAEoCRIbChNhZ2dy",
            "ZWdhdGVfdGhyZXNob2xkGAMgASgFEjIKG2FnZ3JlZ2F0b3JfY29udHJhY3Rf",
            "YWRkcmVzcxgEIAEoCzINLmFlbGYuQWRkcmVzcxISCgpub2RlX2luZGV4GAUg",
            "ASgFIkgKEkNvbmZpcm1SZXBvcnRJbnB1dBINCgV0b2tlbhgBIAEoCRIQCghy",
            "b3VuZF9pZBgCIAEoAxIRCglzaWduYXR1cmUYAyABKAkiWwoRUmVqZWN0UmVw",
            "b3J0SW5wdXQSDQoFdG9rZW4YASABKAkSEAoIcm91bmRfaWQYAiABKAMSJQoO",
            "YWNjdXNpbmdfbm9kZXMYAyADKAsyDS5hZWxmLkFkZHJlc3MimAEKBlJlcG9y",
            "dBIcCghxdWVyeV9pZBgBIAEoCzIKLmFlbGYuSGFzaBIQCghyb3VuZF9pZBgC",
            "IAEoAxIjCgxvYnNlcnZhdGlvbnMYAyABKAsyDS5PYnNlcnZhdGlvbnMSFwoP",
            "YWdncmVnYXRlZF9kYXRhGAQgASgMEiAKCW9ic2VydmVycxgFIAMoCzINLk9i",
            "c2VydmVyTGlzdCKoAQoRUmVwb3J0UXVlcnlSZWNvcmQSKgoTb3JpZ2luX3F1",
            "ZXJ5X3NlbmRlchgBIAEoCzINLmFlbGYuQWRkcmVzcxIXCg9wYWlkX3JlcG9y",
            "dF9mZWUYAiABKAMSEwoLaXNfcmVqZWN0ZWQYAyABKAgSHQoVaXNfYWxsX25v",
            "ZGVfY29uZmlybWVkGAQgASgIEhoKEm5vZGVfY29uZmlybV9jb3VudBgFIAEo",
            "AyIsCgxPYnNlcnZlckxpc3QSHAoFdmFsdWUYASADKAsyDS5hZWxmLkFkZHJl",
            "c3MiNwoSUHJvcG9zZVJlcG9ydElucHV0EiEKDXF1ZXJ5X2lkX2xpc3QYASAD",
            "KAsyCi5hZWxmLkhhc2giKwoMT2JzZXJ2YXRpb25zEhsKBXZhbHVlGAEgAygL",
            "MgwuT2JzZXJ2YXRpb24iKAoLT2JzZXJ2YXRpb24SCwoDa2V5GAEgASgJEgwK",
            "BGRhdGEYAiABKAkiVAoRR2V0U2lnbmF0dXJlSW5wdXQSDQoFdG9rZW4YASAB",
            "KAkSEAoIcm91bmRfaWQYAiABKAMSHgoHYWRkcmVzcxgDIAEoCzINLmFlbGYu",
            "QWRkcmVzcyI3ChRHZXRTaWduYXR1cmVNYXBJbnB1dBINCgV0b2tlbhgBIAEo",
            "CRIQCghyb3VuZF9pZBgCIAEoAyJlCgxTaWduYXR1cmVNYXASJwoFdmFsdWUY",
            "ASADKAsyGC5TaWduYXR1cmVNYXAuVmFsdWVFbnRyeRosCgpWYWx1ZUVudHJ5",
            "EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiyAIKF09mZkNoYWlu",
            "QWdncmVnYXRpb25JbmZvEg0KBXRva2VuGAEgASgJEjkKGW9mZl9jaGFpbl9x",
            "dWVyeV9pbmZvX2xpc3QYAiABKAsyFi5PZmZDaGFpblF1ZXJ5SW5mb0xpc3QS",
            "Mwocb2JzZXJ2ZXJfYXNzb2NpYXRpb25fYWRkcmVzcxgDIAEoCzINLmFlbGYu",
            "QWRkcmVzcxIVCg1jb25maWdfZGlnZXN0GAQgASgMEhsKE2FnZ3JlZ2F0ZV90",
            "aHJlc2hvbGQYBSABKAUSMgobYWdncmVnYXRvcl9jb250cmFjdF9hZGRyZXNz",
            "GAYgASgLMg0uYWVsZi5BZGRyZXNzEhEKCXJvdW5kX2lkcxgHIAMoAxISCgpj",
            "aGFpbl90eXBlGAggASgJEh8KCHJlZ2lzdGVyGAkgASgLMg0uYWVsZi5BZGRy",
            "ZXNzIq8CCiBSZWdpc3Rlck9mZkNoYWluQWdncmVnYXRpb25JbnB1dBIkCg1v",
            "YnNlcnZlcl9saXN0GAEgASgLMg0uT2JzZXJ2ZXJMaXN0EjkKGW9mZl9jaGFp",
            "bl9xdWVyeV9pbmZvX2xpc3QYAiABKAsyFi5PZmZDaGFpblF1ZXJ5SW5mb0xp",
            "c3QSDQoFdG9rZW4YAyABKAkSFQoNY29uZmlnX2RpZ2VzdBgEIAEoDBIbChNh",
            "Z2dyZWdhdGVfdGhyZXNob2xkGAUgASgFEjIKG2FnZ3JlZ2F0b3JfY29udHJh",
            "Y3RfYWRkcmVzcxgGIAEoCzINLmFlbGYuQWRkcmVzcxISCgpjaGFpbl90eXBl",
            "GAcgASgJEh8KCHJlZ2lzdGVyGAggASgLMg0uYWVsZi5BZGRyZXNzIkYKEU9m",
            "ZkNoYWluUXVlcnlJbmZvEhQKDHVybF90b19xdWVyeRgBIAEoCRIbChNhdHRy",
            "aWJ1dGVzX3RvX2ZldGNoGAIgAygJIjEKDkdldFJlcG9ydElucHV0Eg0KBXRv",
            "a2VuGAEgASgJEhAKCHJvdW5kX2lkGAIgASgDIkkKEkdldE1lcmtsZVBhdGhJ",
            "bnB1dBINCgV0b2tlbhgBIAEoCRIQCghyb3VuZF9pZBgCIAEoAxISCgpub2Rl",
            "X2luZGV4GAMgASgFIjQKEUdldFJhd1JlcG9ydElucHV0Eg0KBXRva2VuGAEg",
            "ASgJEhAKCHJvdW5kX2lkGAIgASgDIm0KFkdlbmVyYXRlUmF3UmVwb3J0SW5w",
            "dXQSFwoGcmVwb3J0GAEgASgLMgcuUmVwb3J0EhUKDWNvbmZpZ19kaWdlc3QY",
            "AiABKAwSIwoMb3JnYW5pemF0aW9uGAMgASgLMg0uYWVsZi5BZGRyZXNzIjoK",
            "FU9mZkNoYWluUXVlcnlJbmZvTGlzdBIhCgV2YWx1ZRgBIAMoCzISLk9mZkNo",
            "YWluUXVlcnlJbmZvIlwKGUFkZE9mZkNoYWluUXVlcnlJbmZvSW5wdXQSDQoF",
            "dG9rZW4YASABKAkSMAoUb2ZmX2NoYWluX3F1ZXJ5X2luZm8YAiABKAsyEi5P",
            "ZmZDaGFpblF1ZXJ5SW5mbyJIChxSZW1vdmVPZmZDaGFpblF1ZXJ5SW5mb0lu",
            "cHV0Eg0KBXRva2VuGAEgASgJEhkKEXJlbW92ZV9ub2RlX2luZGV4GAIgASgF",
            "IoABCg5SZXBvcnRQcm9wb3NlZBISCgpyYXdfcmVwb3J0GAEgASgJEjMKHG9i",
            "c2VydmVyX2Fzc29jaWF0aW9uX2FkZHJlc3MYAiABKAsyDS5hZWxmLkFkZHJl",
            "c3MSDQoFdG9rZW4YAyABKAkSEAoIcm91bmRfaWQYBCABKAM6BKC7GAEinwEK",
            "D1JlcG9ydENvbmZpcm1lZBIQCghyb3VuZF9pZBgBIAEoAxIRCglzaWduYXR1",
            "cmUYAiABKAkSMwocb2JzZXJ2ZXJfYXNzb2NpYXRpb25fYWRkcmVzcxgDIAEo",
            "CzINLmFlbGYuQWRkcmVzcxINCgV0b2tlbhgEIAEoCRIdChVpc19hbGxfbm9k",
            "ZV9jb25maXJtZWQYBSABKAg6BKC7GAEiwQIKHU9mZkNoYWluQWdncmVnYXRp",
            "b25SZWdpc3RlcmVkEg0KBXRva2VuGAEgASgJEjkKGW9mZl9jaGFpbl9xdWVy",
            "eV9pbmZvX2xpc3QYAiABKAsyFi5PZmZDaGFpblF1ZXJ5SW5mb0xpc3QSMwoc",
            "b2JzZXJ2ZXJfYXNzb2NpYXRpb25fYWRkcmVzcxgDIAEoCzINLmFlbGYuQWRk",
            "cmVzcxIVCg1jb25maWdfZGlnZXN0GAQgASgMEhsKE2FnZ3JlZ2F0ZV90aHJl",
            "c2hvbGQYBSABKAUSMgobYWdncmVnYXRvcl9jb250cmFjdF9hZGRyZXNzGAYg",
            "ASgLMg0uYWVsZi5BZGRyZXNzEhIKCmNoYWluX3R5cGUYByABKAkSHwoIcmVn",
            "aXN0ZXIYCCABKAsyDS5hZWxmLkFkZHJlc3M6BKC7GAEicAoVTWVya2xlUmVw",
            "b3J0Tm9kZUFkZGVkEg0KBXRva2VuGAEgASgJEhIKCm5vZGVfaW5kZXgYAiAB",
            "KAUSFQoNbm9kZV9yb3VuZF9pZBgDIAEoAxIXCg9hZ2dyZWdhdGVkX2RhdGEY",
            "BCABKAk6BKC7GAEyqxAKDlJlcG9ydENvbnRyYWN0EjgKCkluaXRpYWxpemUS",
            "EC5Jbml0aWFsaXplSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIu",
            "CgtRdWVyeU9yYWNsZRIRLlF1ZXJ5T3JhY2xlSW5wdXQaCi5hZWxmLkhhc2gi",
            "ABI5ChFDYW5jZWxRdWVyeU9yYWNsZRIKLmFlbGYuSGFzaBoWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eSIAEj4KDUNvbmZpcm1SZXBvcnQSEy5Db25maXJtUmVw",
            "b3J0SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI8CgxSZWplY3RS",
            "ZXBvcnQSEi5SZWplY3RSZXBvcnRJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eSIAEk8KFkFkanVzdEFtZXJjZW1lbnRBbW91bnQSGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEioK",
            "DVByb3Bvc2VSZXBvcnQSDi5DYWxsYmFja0lucHV0GgcuUmVwb3J0IgASRwoO",
            "TW9ydGdhZ2VUb2tlbnMSGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkcKDldpdGhkcmF3VG9rZW5zEhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiABJBCg1BcHBseU9ic2VydmVyEhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQAoMUXVpdE9ic2VydmVy",
            "EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5IgASTwoWQWRqdXN0QXBwbHlPYnNlcnZlckZlZRIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQ2NFZhbHVlGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASSAoP",
            "QWRqdXN0UmVwb3J0RmVlEhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJcChtSZWdpc3Rlck9mZkNoYWlu",
            "QWdncmVnYXRpb24SIS5SZWdpc3Rlck9mZkNoYWluQWdncmVnYXRpb25JbnB1",
            "dBoYLk9mZkNoYWluQWdncmVnYXRpb25JbmZvIgASTAoUQWRkT2ZmQ2hhaW5R",
            "dWVyeUluZm8SGi5BZGRPZmZDaGFpblF1ZXJ5SW5mb0lucHV0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASUgoXUmVtb3ZlT2ZmQ2hhaW5RdWVyeUluZm8S",
            "HS5SZW1vdmVPZmZDaGFpblF1ZXJ5SW5mb0lucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASPwoUQWRkUmVnaXN0ZXJXaGl0ZUxpc3QSDS5hZWxmLkFk",
            "ZHJlc3MaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJGChtSZW1vdmVGcm9t",
            "UmVnaXN0ZXJXaGl0ZUxpc3QSDS5hZWxmLkFkZHJlc3MaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiABI9Cg1HZXRNZXJrbGVQYXRoEhMuR2V0TWVya2xlUGF0",
            "aElucHV0GhAuYWVsZi5NZXJrbGVQYXRoIgWIifcBARIsCglHZXRSZXBvcnQS",
            "Dy5HZXRSZXBvcnRJbnB1dBoHLlJlcG9ydCIFiIn3AQESRwoMR2V0U2lnbmF0",
            "dXJlEhIuR2V0U2lnbmF0dXJlSW5wdXQaHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUiBYiJ9wEBElsKGkdldE9mZkNoYWluQWdncmVnYXRpb25JbmZv",
            "EhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlGhguT2ZmQ2hhaW5BZ2dy",
            "ZWdhdGlvbkluZm8iBYiJ9wEBEj0KFEdldFJlcG9ydFF1ZXJ5UmVjb3JkEgou",
            "YWVsZi5IYXNoGhIuUmVwb3J0UXVlcnlSZWNvcmQiBYiJ9wEBElUKEUdldEN1",
            "cnJlbnRSb3VuZElkEhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlGhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBEkcKDEdldFJhd1Jl",
            "cG9ydBISLkdldFJhd1JlcG9ydElucHV0GhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlIgWIifcBARJRChFHZW5lcmF0ZVJhd1JlcG9ydBIXLkdlbmVy",
            "YXRlUmF3UmVwb3J0SW5wdXQaHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFs",
            "dWUiBYiJ9wEBEj4KD0dldFNpZ25hdHVyZU1hcBIVLkdldFNpZ25hdHVyZU1h",
            "cElucHV0Gg0uU2lnbmF0dXJlTWFwIgWIifcBARJJChVJc0luUmVnaXN0ZXJX",
            "aGl0ZUxpc3QSDS5hZWxmLkFkZHJlc3MaGi5nb29nbGUucHJvdG9idWYuQm9v",
            "bFZhbHVlIgWIifcBARI+CgpJc09ic2VydmVyEg0uYWVsZi5BZGRyZXNzGhou",
            "Z29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSIFiIn3AQEaLrLM9gEpQUVsZi5D",
            "b250cmFjdHMuUmVwb3J0LlJlcG9ydENvbnRyYWN0U3RhdGVCGKoCFUFFbGYu",
            "Q29udHJhY3RzLlJlcG9ydGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::CallbackInputReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.InitializeInput), global::AElf.Contracts.Report.InitializeInput.Parser, new[]{ "OracleContractAddress", "ReportFee", "ApplyObserverFee", "InitialRegisterWhiteList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.QueryOracleInput), global::AElf.Contracts.Report.QueryOracleInput.Parser, new[]{ "Payment", "Token", "AggregateThreshold", "AggregatorContractAddress", "NodeIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.ConfirmReportInput), global::AElf.Contracts.Report.ConfirmReportInput.Parser, new[]{ "Token", "RoundId", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.RejectReportInput), global::AElf.Contracts.Report.RejectReportInput.Parser, new[]{ "Token", "RoundId", "AccusingNodes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.Report), global::AElf.Contracts.Report.Report.Parser, new[]{ "QueryId", "RoundId", "Observations", "AggregatedData", "Observers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.ReportQueryRecord), global::AElf.Contracts.Report.ReportQueryRecord.Parser, new[]{ "OriginQuerySender", "PaidReportFee", "IsRejected", "IsAllNodeConfirmed", "NodeConfirmCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.ObserverList), global::AElf.Contracts.Report.ObserverList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.ProposeReportInput), global::AElf.Contracts.Report.ProposeReportInput.Parser, new[]{ "QueryIdList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.Observations), global::AElf.Contracts.Report.Observations.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.Observation), global::AElf.Contracts.Report.Observation.Parser, new[]{ "Key", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.GetSignatureInput), global::AElf.Contracts.Report.GetSignatureInput.Parser, new[]{ "Token", "RoundId", "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.GetSignatureMapInput), global::AElf.Contracts.Report.GetSignatureMapInput.Parser, new[]{ "Token", "RoundId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.SignatureMap), global::AElf.Contracts.Report.SignatureMap.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.OffChainAggregationInfo), global::AElf.Contracts.Report.OffChainAggregationInfo.Parser, new[]{ "Token", "OffChainQueryInfoList", "ObserverAssociationAddress", "ConfigDigest", "AggregateThreshold", "AggregatorContractAddress", "RoundIds", "ChainType", "Register" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.RegisterOffChainAggregationInput), global::AElf.Contracts.Report.RegisterOffChainAggregationInput.Parser, new[]{ "ObserverList", "OffChainQueryInfoList", "Token", "ConfigDigest", "AggregateThreshold", "AggregatorContractAddress", "ChainType", "Register" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.OffChainQueryInfo), global::AElf.Contracts.Report.OffChainQueryInfo.Parser, new[]{ "Title", "Options" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.GetReportInput), global::AElf.Contracts.Report.GetReportInput.Parser, new[]{ "Token", "RoundId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.GetMerklePathInput), global::AElf.Contracts.Report.GetMerklePathInput.Parser, new[]{ "Token", "RoundId", "NodeIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.GetRawReportInput), global::AElf.Contracts.Report.GetRawReportInput.Parser, new[]{ "Token", "RoundId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.GenerateRawReportInput), global::AElf.Contracts.Report.GenerateRawReportInput.Parser, new[]{ "Report", "ConfigDigest", "Organization" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.OffChainQueryInfoList), global::AElf.Contracts.Report.OffChainQueryInfoList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.AddOffChainQueryInfoInput), global::AElf.Contracts.Report.AddOffChainQueryInfoInput.Parser, new[]{ "Token", "OffChainQueryInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.RemoveOffChainQueryInfoInput), global::AElf.Contracts.Report.RemoveOffChainQueryInfoInput.Parser, new[]{ "Token", "RemoveNodeIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.ReportProposed), global::AElf.Contracts.Report.ReportProposed.Parser, new[]{ "RawReport", "ObserverAssociationAddress", "Token", "RoundId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.ReportConfirmed), global::AElf.Contracts.Report.ReportConfirmed.Parser, new[]{ "RoundId", "Signature", "ObserverAssociationAddress", "Token", "IsAllNodeConfirmed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.OffChainAggregationRegistered), global::AElf.Contracts.Report.OffChainAggregationRegistered.Parser, new[]{ "Token", "OffChainQueryInfoList", "ObserverAssociationAddress", "ConfigDigest", "AggregateThreshold", "AggregatorContractAddress", "ChainType", "Register" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Report.MerkleReportNodeAdded), global::AElf.Contracts.Report.MerkleReportNodeAdded.Parser, new[]{ "Token", "NodeIndex", "NodeRoundId", "AggregatedData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      oracleContractAddress_ = other.oracleContractAddress_ != null ? other.oracleContractAddress_.Clone() : null;
      reportFee_ = other.reportFee_;
      applyObserverFee_ = other.applyObserverFee_;
      initialRegisterWhiteList_ = other.initialRegisterWhiteList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "oracle_contract_address" field.</summary>
    public const int OracleContractAddressFieldNumber = 1;
    private global::AElf.Types.Address oracleContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleContractAddress {
      get { return oracleContractAddress_; }
      set {
        oracleContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "report_fee" field.</summary>
    public const int ReportFeeFieldNumber = 2;
    private long reportFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportFee {
      get { return reportFee_; }
      set {
        reportFee_ = value;
      }
    }

    /// <summary>Field number for the "apply_observer_fee" field.</summary>
    public const int ApplyObserverFeeFieldNumber = 3;
    private long applyObserverFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ApplyObserverFee {
      get { return applyObserverFee_; }
      set {
        applyObserverFee_ = value;
      }
    }

    /// <summary>Field number for the "initial_register_white_list" field.</summary>
    public const int InitialRegisterWhiteListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_initialRegisterWhiteList_codec
        = pb::FieldCodec.ForMessage(34, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> initialRegisterWhiteList_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> InitialRegisterWhiteList {
      get { return initialRegisterWhiteList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OracleContractAddress, other.OracleContractAddress)) return false;
      if (ReportFee != other.ReportFee) return false;
      if (ApplyObserverFee != other.ApplyObserverFee) return false;
      if(!initialRegisterWhiteList_.Equals(other.initialRegisterWhiteList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oracleContractAddress_ != null) hash ^= OracleContractAddress.GetHashCode();
      if (ReportFee != 0L) hash ^= ReportFee.GetHashCode();
      if (ApplyObserverFee != 0L) hash ^= ApplyObserverFee.GetHashCode();
      hash ^= initialRegisterWhiteList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oracleContractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleContractAddress);
      }
      if (ReportFee != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReportFee);
      }
      if (ApplyObserverFee != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ApplyObserverFee);
      }
      initialRegisterWhiteList_.WriteTo(output, _repeated_initialRegisterWhiteList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oracleContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleContractAddress);
      }
      if (ReportFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportFee);
      }
      if (ApplyObserverFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyObserverFee);
      }
      size += initialRegisterWhiteList_.CalculateSize(_repeated_initialRegisterWhiteList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.oracleContractAddress_ != null) {
        if (oracleContractAddress_ == null) {
          OracleContractAddress = new global::AElf.Types.Address();
        }
        OracleContractAddress.MergeFrom(other.OracleContractAddress);
      }
      if (other.ReportFee != 0L) {
        ReportFee = other.ReportFee;
      }
      if (other.ApplyObserverFee != 0L) {
        ApplyObserverFee = other.ApplyObserverFee;
      }
      initialRegisterWhiteList_.Add(other.initialRegisterWhiteList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oracleContractAddress_ == null) {
              OracleContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleContractAddress);
            break;
          }
          case 16: {
            ReportFee = input.ReadInt64();
            break;
          }
          case 24: {
            ApplyObserverFee = input.ReadInt64();
            break;
          }
          case 34: {
            initialRegisterWhiteList_.AddEntriesFrom(input, _repeated_initialRegisterWhiteList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryOracleInput : pb::IMessage<QueryOracleInput> {
    private static readonly pb::MessageParser<QueryOracleInput> _parser = new pb::MessageParser<QueryOracleInput>(() => new QueryOracleInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryOracleInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOracleInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOracleInput(QueryOracleInput other) : this() {
      payment_ = other.payment_;
      token_ = other.token_;
      aggregateThreshold_ = other.aggregateThreshold_;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      nodeIndex_ = other.nodeIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOracleInput Clone() {
      return new QueryOracleInput(this);
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 1;
    private long payment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 3;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 4;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "node_index" field.</summary>
    public const int NodeIndexFieldNumber = 5;
    private int nodeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeIndex {
      get { return nodeIndex_; }
      set {
        nodeIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryOracleInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryOracleInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payment != other.Payment) return false;
      if (Token != other.Token) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (NodeIndex != other.NodeIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payment != 0L) hash ^= Payment.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (NodeIndex != 0) hash ^= NodeIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (NodeIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NodeIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Payment);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (NodeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryOracleInput other) {
      if (other == null) {
        return;
      }
      if (other.Payment != 0L) {
        Payment = other.Payment;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.NodeIndex != 0) {
        NodeIndex = other.NodeIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 34: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 40: {
            NodeIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfirmReportInput : pb::IMessage<ConfirmReportInput> {
    private static readonly pb::MessageParser<ConfirmReportInput> _parser = new pb::MessageParser<ConfirmReportInput>(() => new ConfirmReportInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmReportInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmReportInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmReportInput(ConfirmReportInput other) : this() {
      token_ = other.token_;
      roundId_ = other.roundId_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmReportInput Clone() {
      return new ConfirmReportInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 3;
    private string signature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmReportInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmReportInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmReportInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
          case 26: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RejectReportInput : pb::IMessage<RejectReportInput> {
    private static readonly pb::MessageParser<RejectReportInput> _parser = new pb::MessageParser<RejectReportInput>(() => new RejectReportInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RejectReportInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RejectReportInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RejectReportInput(RejectReportInput other) : this() {
      token_ = other.token_;
      roundId_ = other.roundId_;
      accusingNodes_ = other.accusingNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RejectReportInput Clone() {
      return new RejectReportInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "accusing_nodes" field.</summary>
    public const int AccusingNodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_accusingNodes_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> accusingNodes_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> AccusingNodes {
      get { return accusingNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RejectReportInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RejectReportInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      if(!accusingNodes_.Equals(other.accusingNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      hash ^= accusingNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      accusingNodes_.WriteTo(output, _repeated_accusingNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      size += accusingNodes_.CalculateSize(_repeated_accusingNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RejectReportInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      accusingNodes_.Add(other.accusingNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
          case 26: {
            accusingNodes_.AddEntriesFrom(input, _repeated_accusingNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Report : pb::IMessage<Report> {
    private static readonly pb::MessageParser<Report> _parser = new pb::MessageParser<Report>(() => new Report());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Report> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report(Report other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      roundId_ = other.roundId_;
      observations_ = other.observations_ != null ? other.observations_.Clone() : null;
      aggregatedData_ = other.aggregatedData_;
      observers_ = other.observers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report Clone() {
      return new Report(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "observations" field.</summary>
    public const int ObservationsFieldNumber = 3;
    private global::AElf.Contracts.Report.Observations observations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Report.Observations Observations {
      get { return observations_; }
      set {
        observations_ = value;
      }
    }

    /// <summary>Field number for the "aggregated_data" field.</summary>
    public const int AggregatedDataFieldNumber = 4;
    private pb::ByteString aggregatedData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AggregatedData {
      get { return aggregatedData_; }
      set {
        aggregatedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "observers" field.</summary>
    public const int ObserversFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Report.ObserverList> _repeated_observers_codec
        = pb::FieldCodec.ForMessage(42, global::AElf.Contracts.Report.ObserverList.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Report.ObserverList> observers_ = new pbc::RepeatedField<global::AElf.Contracts.Report.ObserverList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Report.ObserverList> Observers {
      get { return observers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Report);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Report other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (RoundId != other.RoundId) return false;
      if (!object.Equals(Observations, other.Observations)) return false;
      if (AggregatedData != other.AggregatedData) return false;
      if(!observers_.Equals(other.observers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (observations_ != null) hash ^= Observations.GetHashCode();
      if (AggregatedData.Length != 0) hash ^= AggregatedData.GetHashCode();
      hash ^= observers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (observations_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Observations);
      }
      if (AggregatedData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(AggregatedData);
      }
      observers_.WriteTo(output, _repeated_observers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (observations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observations);
      }
      if (AggregatedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AggregatedData);
      }
      size += observers_.CalculateSize(_repeated_observers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Report other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.observations_ != null) {
        if (observations_ == null) {
          Observations = new global::AElf.Contracts.Report.Observations();
        }
        Observations.MergeFrom(other.Observations);
      }
      if (other.AggregatedData.Length != 0) {
        AggregatedData = other.AggregatedData;
      }
      observers_.Add(other.observers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
          case 26: {
            if (observations_ == null) {
              Observations = new global::AElf.Contracts.Report.Observations();
            }
            input.ReadMessage(Observations);
            break;
          }
          case 34: {
            AggregatedData = input.ReadBytes();
            break;
          }
          case 42: {
            observers_.AddEntriesFrom(input, _repeated_observers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportQueryRecord : pb::IMessage<ReportQueryRecord> {
    private static readonly pb::MessageParser<ReportQueryRecord> _parser = new pb::MessageParser<ReportQueryRecord>(() => new ReportQueryRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportQueryRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportQueryRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportQueryRecord(ReportQueryRecord other) : this() {
      originQuerySender_ = other.originQuerySender_ != null ? other.originQuerySender_.Clone() : null;
      paidReportFee_ = other.paidReportFee_;
      isRejected_ = other.isRejected_;
      isAllNodeConfirmed_ = other.isAllNodeConfirmed_;
      nodeConfirmCount_ = other.nodeConfirmCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportQueryRecord Clone() {
      return new ReportQueryRecord(this);
    }

    /// <summary>Field number for the "origin_query_sender" field.</summary>
    public const int OriginQuerySenderFieldNumber = 1;
    private global::AElf.Types.Address originQuerySender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OriginQuerySender {
      get { return originQuerySender_; }
      set {
        originQuerySender_ = value;
      }
    }

    /// <summary>Field number for the "paid_report_fee" field.</summary>
    public const int PaidReportFeeFieldNumber = 2;
    private long paidReportFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PaidReportFee {
      get { return paidReportFee_; }
      set {
        paidReportFee_ = value;
      }
    }

    /// <summary>Field number for the "is_rejected" field.</summary>
    public const int IsRejectedFieldNumber = 3;
    private bool isRejected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRejected {
      get { return isRejected_; }
      set {
        isRejected_ = value;
      }
    }

    /// <summary>Field number for the "is_all_node_confirmed" field.</summary>
    public const int IsAllNodeConfirmedFieldNumber = 4;
    private bool isAllNodeConfirmed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAllNodeConfirmed {
      get { return isAllNodeConfirmed_; }
      set {
        isAllNodeConfirmed_ = value;
      }
    }

    /// <summary>Field number for the "node_confirm_count" field.</summary>
    public const int NodeConfirmCountFieldNumber = 5;
    private long nodeConfirmCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeConfirmCount {
      get { return nodeConfirmCount_; }
      set {
        nodeConfirmCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportQueryRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportQueryRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OriginQuerySender, other.OriginQuerySender)) return false;
      if (PaidReportFee != other.PaidReportFee) return false;
      if (IsRejected != other.IsRejected) return false;
      if (IsAllNodeConfirmed != other.IsAllNodeConfirmed) return false;
      if (NodeConfirmCount != other.NodeConfirmCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (originQuerySender_ != null) hash ^= OriginQuerySender.GetHashCode();
      if (PaidReportFee != 0L) hash ^= PaidReportFee.GetHashCode();
      if (IsRejected != false) hash ^= IsRejected.GetHashCode();
      if (IsAllNodeConfirmed != false) hash ^= IsAllNodeConfirmed.GetHashCode();
      if (NodeConfirmCount != 0L) hash ^= NodeConfirmCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (originQuerySender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OriginQuerySender);
      }
      if (PaidReportFee != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PaidReportFee);
      }
      if (IsRejected != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRejected);
      }
      if (IsAllNodeConfirmed != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAllNodeConfirmed);
      }
      if (NodeConfirmCount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NodeConfirmCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (originQuerySender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginQuerySender);
      }
      if (PaidReportFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PaidReportFee);
      }
      if (IsRejected != false) {
        size += 1 + 1;
      }
      if (IsAllNodeConfirmed != false) {
        size += 1 + 1;
      }
      if (NodeConfirmCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeConfirmCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportQueryRecord other) {
      if (other == null) {
        return;
      }
      if (other.originQuerySender_ != null) {
        if (originQuerySender_ == null) {
          OriginQuerySender = new global::AElf.Types.Address();
        }
        OriginQuerySender.MergeFrom(other.OriginQuerySender);
      }
      if (other.PaidReportFee != 0L) {
        PaidReportFee = other.PaidReportFee;
      }
      if (other.IsRejected != false) {
        IsRejected = other.IsRejected;
      }
      if (other.IsAllNodeConfirmed != false) {
        IsAllNodeConfirmed = other.IsAllNodeConfirmed;
      }
      if (other.NodeConfirmCount != 0L) {
        NodeConfirmCount = other.NodeConfirmCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (originQuerySender_ == null) {
              OriginQuerySender = new global::AElf.Types.Address();
            }
            input.ReadMessage(OriginQuerySender);
            break;
          }
          case 16: {
            PaidReportFee = input.ReadInt64();
            break;
          }
          case 24: {
            IsRejected = input.ReadBool();
            break;
          }
          case 32: {
            IsAllNodeConfirmed = input.ReadBool();
            break;
          }
          case 40: {
            NodeConfirmCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObserverList : pb::IMessage<ObserverList> {
    private static readonly pb::MessageParser<ObserverList> _parser = new pb::MessageParser<ObserverList>(() => new ObserverList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObserverList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverList(ObserverList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObserverList Clone() {
      return new ObserverList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> value_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObserverList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObserverList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObserverList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProposeReportInput : pb::IMessage<ProposeReportInput> {
    private static readonly pb::MessageParser<ProposeReportInput> _parser = new pb::MessageParser<ProposeReportInput>(() => new ProposeReportInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProposeReportInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProposeReportInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProposeReportInput(ProposeReportInput other) : this() {
      queryIdList_ = other.queryIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProposeReportInput Clone() {
      return new ProposeReportInput(this);
    }

    /// <summary>Field number for the "query_id_list" field.</summary>
    public const int QueryIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_queryIdList_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> queryIdList_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> QueryIdList {
      get { return queryIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProposeReportInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProposeReportInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!queryIdList_.Equals(other.queryIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= queryIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      queryIdList_.WriteTo(output, _repeated_queryIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += queryIdList_.CalculateSize(_repeated_queryIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProposeReportInput other) {
      if (other == null) {
        return;
      }
      queryIdList_.Add(other.queryIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            queryIdList_.AddEntriesFrom(input, _repeated_queryIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Observations : pb::IMessage<Observations> {
    private static readonly pb::MessageParser<Observations> _parser = new pb::MessageParser<Observations>(() => new Observations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Observations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observations(Observations other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observations Clone() {
      return new Observations(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Report.Observation> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Report.Observation.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Report.Observation> value_ = new pbc::RepeatedField<global::AElf.Contracts.Report.Observation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Report.Observation> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Observations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Observations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Observations other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Observation : pb::IMessage<Observation> {
    private static readonly pb::MessageParser<Observation> _parser = new pb::MessageParser<Observation>(() => new Observation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Observation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observation(Observation other) : this() {
      key_ = other.key_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observation Clone() {
      return new Observation(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Observation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Observation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Observation other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSignatureInput : pb::IMessage<GetSignatureInput> {
    private static readonly pb::MessageParser<GetSignatureInput> _parser = new pb::MessageParser<GetSignatureInput>(() => new GetSignatureInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSignatureInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureInput(GetSignatureInput other) : this() {
      token_ = other.token_;
      roundId_ = other.roundId_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureInput Clone() {
      return new GetSignatureInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSignatureInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSignatureInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (address_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSignatureInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
          case 26: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSignatureMapInput : pb::IMessage<GetSignatureMapInput> {
    private static readonly pb::MessageParser<GetSignatureMapInput> _parser = new pb::MessageParser<GetSignatureMapInput>(() => new GetSignatureMapInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSignatureMapInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureMapInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureMapInput(GetSignatureMapInput other) : this() {
      token_ = other.token_;
      roundId_ = other.roundId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureMapInput Clone() {
      return new GetSignatureMapInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSignatureMapInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSignatureMapInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSignatureMapInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignatureMap : pb::IMessage<SignatureMap> {
    private static readonly pb::MessageParser<SignatureMap> _parser = new pb::MessageParser<SignatureMap>(() => new SignatureMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignatureMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignatureMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignatureMap(SignatureMap other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignatureMap Clone() {
      return new SignatureMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_value_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> value_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignatureMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignatureMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignatureMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OffChainAggregationInfo : pb::IMessage<OffChainAggregationInfo> {
    private static readonly pb::MessageParser<OffChainAggregationInfo> _parser = new pb::MessageParser<OffChainAggregationInfo>(() => new OffChainAggregationInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OffChainAggregationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainAggregationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainAggregationInfo(OffChainAggregationInfo other) : this() {
      token_ = other.token_;
      offChainQueryInfoList_ = other.offChainQueryInfoList_ != null ? other.offChainQueryInfoList_.Clone() : null;
      observerAssociationAddress_ = other.observerAssociationAddress_ != null ? other.observerAssociationAddress_.Clone() : null;
      configDigest_ = other.configDigest_;
      aggregateThreshold_ = other.aggregateThreshold_;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      roundIds_ = other.roundIds_.Clone();
      chainType_ = other.chainType_;
      register_ = other.register_ != null ? other.register_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainAggregationInfo Clone() {
      return new OffChainAggregationInfo(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "off_chain_query_info_list" field.</summary>
    public const int OffChainQueryInfoListFieldNumber = 2;
    private global::AElf.Contracts.Report.OffChainQueryInfoList offChainQueryInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Report.OffChainQueryInfoList OffChainQueryInfoList {
      get { return offChainQueryInfoList_; }
      set {
        offChainQueryInfoList_ = value;
      }
    }

    /// <summary>Field number for the "observer_association_address" field.</summary>
    public const int ObserverAssociationAddressFieldNumber = 3;
    private global::AElf.Types.Address observerAssociationAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ObserverAssociationAddress {
      get { return observerAssociationAddress_; }
      set {
        observerAssociationAddress_ = value;
      }
    }

    /// <summary>Field number for the "config_digest" field.</summary>
    public const int ConfigDigestFieldNumber = 4;
    private pb::ByteString configDigest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigDigest {
      get { return configDigest_; }
      set {
        configDigest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 5;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 6;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "round_ids" field.</summary>
    public const int RoundIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_roundIds_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> roundIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RoundIds {
      get { return roundIds_; }
    }

    /// <summary>Field number for the "chain_type" field.</summary>
    public const int ChainTypeFieldNumber = 8;
    private string chainType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainType {
      get { return chainType_; }
      set {
        chainType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "register" field.</summary>
    public const int RegisterFieldNumber = 9;
    private global::AElf.Types.Address register_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Register {
      get { return register_; }
      set {
        register_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OffChainAggregationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OffChainAggregationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!object.Equals(OffChainQueryInfoList, other.OffChainQueryInfoList)) return false;
      if (!object.Equals(ObserverAssociationAddress, other.ObserverAssociationAddress)) return false;
      if (ConfigDigest != other.ConfigDigest) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if(!roundIds_.Equals(other.roundIds_)) return false;
      if (ChainType != other.ChainType) return false;
      if (!object.Equals(Register, other.Register)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (offChainQueryInfoList_ != null) hash ^= OffChainQueryInfoList.GetHashCode();
      if (observerAssociationAddress_ != null) hash ^= ObserverAssociationAddress.GetHashCode();
      if (ConfigDigest.Length != 0) hash ^= ConfigDigest.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      hash ^= roundIds_.GetHashCode();
      if (ChainType.Length != 0) hash ^= ChainType.GetHashCode();
      if (register_ != null) hash ^= Register.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (offChainQueryInfoList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OffChainQueryInfoList);
      }
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (ConfigDigest.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ConfigDigest);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AggregatorContractAddress);
      }
      roundIds_.WriteTo(output, _repeated_roundIds_codec);
      if (ChainType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ChainType);
      }
      if (register_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Register);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (offChainQueryInfoList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffChainQueryInfoList);
      }
      if (observerAssociationAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObserverAssociationAddress);
      }
      if (ConfigDigest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigDigest);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      size += roundIds_.CalculateSize(_repeated_roundIds_codec);
      if (ChainType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainType);
      }
      if (register_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Register);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OffChainAggregationInfo other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.offChainQueryInfoList_ != null) {
        if (offChainQueryInfoList_ == null) {
          OffChainQueryInfoList = new global::AElf.Contracts.Report.OffChainQueryInfoList();
        }
        OffChainQueryInfoList.MergeFrom(other.OffChainQueryInfoList);
      }
      if (other.observerAssociationAddress_ != null) {
        if (observerAssociationAddress_ == null) {
          ObserverAssociationAddress = new global::AElf.Types.Address();
        }
        ObserverAssociationAddress.MergeFrom(other.ObserverAssociationAddress);
      }
      if (other.ConfigDigest.Length != 0) {
        ConfigDigest = other.ConfigDigest;
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      roundIds_.Add(other.roundIds_);
      if (other.ChainType.Length != 0) {
        ChainType = other.ChainType;
      }
      if (other.register_ != null) {
        if (register_ == null) {
          Register = new global::AElf.Types.Address();
        }
        Register.MergeFrom(other.Register);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            if (offChainQueryInfoList_ == null) {
              OffChainQueryInfoList = new global::AElf.Contracts.Report.OffChainQueryInfoList();
            }
            input.ReadMessage(OffChainQueryInfoList);
            break;
          }
          case 26: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 34: {
            ConfigDigest = input.ReadBytes();
            break;
          }
          case 40: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 50: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 58:
          case 56: {
            roundIds_.AddEntriesFrom(input, _repeated_roundIds_codec);
            break;
          }
          case 66: {
            ChainType = input.ReadString();
            break;
          }
          case 74: {
            if (register_ == null) {
              Register = new global::AElf.Types.Address();
            }
            input.ReadMessage(Register);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterOffChainAggregationInput : pb::IMessage<RegisterOffChainAggregationInput> {
    private static readonly pb::MessageParser<RegisterOffChainAggregationInput> _parser = new pb::MessageParser<RegisterOffChainAggregationInput>(() => new RegisterOffChainAggregationInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterOffChainAggregationInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterOffChainAggregationInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterOffChainAggregationInput(RegisterOffChainAggregationInput other) : this() {
      observerList_ = other.observerList_ != null ? other.observerList_.Clone() : null;
      offChainQueryInfoList_ = other.offChainQueryInfoList_ != null ? other.offChainQueryInfoList_.Clone() : null;
      token_ = other.token_;
      configDigest_ = other.configDigest_;
      aggregateThreshold_ = other.aggregateThreshold_;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      chainType_ = other.chainType_;
      register_ = other.register_ != null ? other.register_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterOffChainAggregationInput Clone() {
      return new RegisterOffChainAggregationInput(this);
    }

    /// <summary>Field number for the "observer_list" field.</summary>
    public const int ObserverListFieldNumber = 1;
    private global::AElf.Contracts.Report.ObserverList observerList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Report.ObserverList ObserverList {
      get { return observerList_; }
      set {
        observerList_ = value;
      }
    }

    /// <summary>Field number for the "off_chain_query_info_list" field.</summary>
    public const int OffChainQueryInfoListFieldNumber = 2;
    private global::AElf.Contracts.Report.OffChainQueryInfoList offChainQueryInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Report.OffChainQueryInfoList OffChainQueryInfoList {
      get { return offChainQueryInfoList_; }
      set {
        offChainQueryInfoList_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config_digest" field.</summary>
    public const int ConfigDigestFieldNumber = 4;
    private pb::ByteString configDigest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigDigest {
      get { return configDigest_; }
      set {
        configDigest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 5;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 6;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "chain_type" field.</summary>
    public const int ChainTypeFieldNumber = 7;
    private string chainType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainType {
      get { return chainType_; }
      set {
        chainType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "register" field.</summary>
    public const int RegisterFieldNumber = 8;
    private global::AElf.Types.Address register_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Register {
      get { return register_; }
      set {
        register_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterOffChainAggregationInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterOffChainAggregationInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObserverList, other.ObserverList)) return false;
      if (!object.Equals(OffChainQueryInfoList, other.OffChainQueryInfoList)) return false;
      if (Token != other.Token) return false;
      if (ConfigDigest != other.ConfigDigest) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (ChainType != other.ChainType) return false;
      if (!object.Equals(Register, other.Register)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (observerList_ != null) hash ^= ObserverList.GetHashCode();
      if (offChainQueryInfoList_ != null) hash ^= OffChainQueryInfoList.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ConfigDigest.Length != 0) hash ^= ConfigDigest.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (ChainType.Length != 0) hash ^= ChainType.GetHashCode();
      if (register_ != null) hash ^= Register.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (observerList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObserverList);
      }
      if (offChainQueryInfoList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OffChainQueryInfoList);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (ConfigDigest.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ConfigDigest);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (ChainType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ChainType);
      }
      if (register_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Register);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (observerList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObserverList);
      }
      if (offChainQueryInfoList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffChainQueryInfoList);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ConfigDigest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigDigest);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (ChainType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainType);
      }
      if (register_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Register);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterOffChainAggregationInput other) {
      if (other == null) {
        return;
      }
      if (other.observerList_ != null) {
        if (observerList_ == null) {
          ObserverList = new global::AElf.Contracts.Report.ObserverList();
        }
        ObserverList.MergeFrom(other.ObserverList);
      }
      if (other.offChainQueryInfoList_ != null) {
        if (offChainQueryInfoList_ == null) {
          OffChainQueryInfoList = new global::AElf.Contracts.Report.OffChainQueryInfoList();
        }
        OffChainQueryInfoList.MergeFrom(other.OffChainQueryInfoList);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ConfigDigest.Length != 0) {
        ConfigDigest = other.ConfigDigest;
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.ChainType.Length != 0) {
        ChainType = other.ChainType;
      }
      if (other.register_ != null) {
        if (register_ == null) {
          Register = new global::AElf.Types.Address();
        }
        Register.MergeFrom(other.Register);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (observerList_ == null) {
              ObserverList = new global::AElf.Contracts.Report.ObserverList();
            }
            input.ReadMessage(ObserverList);
            break;
          }
          case 18: {
            if (offChainQueryInfoList_ == null) {
              OffChainQueryInfoList = new global::AElf.Contracts.Report.OffChainQueryInfoList();
            }
            input.ReadMessage(OffChainQueryInfoList);
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            ConfigDigest = input.ReadBytes();
            break;
          }
          case 40: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 50: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 58: {
            ChainType = input.ReadString();
            break;
          }
          case 66: {
            if (register_ == null) {
              Register = new global::AElf.Types.Address();
            }
            input.ReadMessage(Register);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OffChainQueryInfo : pb::IMessage<OffChainQueryInfo> {
    private static readonly pb::MessageParser<OffChainQueryInfo> _parser = new pb::MessageParser<OffChainQueryInfo>(() => new OffChainQueryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OffChainQueryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainQueryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainQueryInfo(OffChainQueryInfo other) : this() {
      Title_ = other.Title_;
      Options_ = other.Options_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainQueryInfo Clone() {
      return new OffChainQueryInfo(this);
    }

    /// <summary>Field number for the "url_to_query" field.</summary>
    public const int TitleFieldNumber = 1;
    private string Title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return Title_; }
      set {
        Title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes_to_fetch" field.</summary>
    public const int OptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_Options_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> Options_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Options {
      get { return Options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OffChainQueryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OffChainQueryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if(!Options_.Equals(other.Options_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      hash ^= Options_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      Options_.WriteTo(output, _repeated_Options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      size += Options_.CalculateSize(_repeated_Options_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OffChainQueryInfo other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      Options_.Add(other.Options_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Options_.AddEntriesFrom(input, _repeated_Options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReportInput : pb::IMessage<GetReportInput> {
    private static readonly pb::MessageParser<GetReportInput> _parser = new pb::MessageParser<GetReportInput>(() => new GetReportInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReportInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportInput(GetReportInput other) : this() {
      token_ = other.token_;
      roundId_ = other.roundId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReportInput Clone() {
      return new GetReportInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReportInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReportInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReportInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMerklePathInput : pb::IMessage<GetMerklePathInput> {
    private static readonly pb::MessageParser<GetMerklePathInput> _parser = new pb::MessageParser<GetMerklePathInput>(() => new GetMerklePathInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMerklePathInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMerklePathInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMerklePathInput(GetMerklePathInput other) : this() {
      token_ = other.token_;
      roundId_ = other.roundId_;
      nodeIndex_ = other.nodeIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMerklePathInput Clone() {
      return new GetMerklePathInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "node_index" field.</summary>
    public const int NodeIndexFieldNumber = 3;
    private int nodeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeIndex {
      get { return nodeIndex_; }
      set {
        nodeIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMerklePathInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMerklePathInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      if (NodeIndex != other.NodeIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (NodeIndex != 0) hash ^= NodeIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (NodeIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NodeIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (NodeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMerklePathInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.NodeIndex != 0) {
        NodeIndex = other.NodeIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
          case 24: {
            NodeIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRawReportInput : pb::IMessage<GetRawReportInput> {
    private static readonly pb::MessageParser<GetRawReportInput> _parser = new pb::MessageParser<GetRawReportInput>(() => new GetRawReportInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRawReportInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRawReportInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRawReportInput(GetRawReportInput other) : this() {
      token_ = other.token_;
      roundId_ = other.roundId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRawReportInput Clone() {
      return new GetRawReportInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRawReportInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRawReportInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRawReportInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenerateRawReportInput : pb::IMessage<GenerateRawReportInput> {
    private static readonly pb::MessageParser<GenerateRawReportInput> _parser = new pb::MessageParser<GenerateRawReportInput>(() => new GenerateRawReportInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateRawReportInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRawReportInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRawReportInput(GenerateRawReportInput other) : this() {
      report_ = other.report_ != null ? other.report_.Clone() : null;
      configDigest_ = other.configDigest_;
      organization_ = other.organization_ != null ? other.organization_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateRawReportInput Clone() {
      return new GenerateRawReportInput(this);
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 1;
    private global::AElf.Contracts.Report.Report report_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Report.Report Report {
      get { return report_; }
      set {
        report_ = value;
      }
    }

    /// <summary>Field number for the "config_digest" field.</summary>
    public const int ConfigDigestFieldNumber = 2;
    private pb::ByteString configDigest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigDigest {
      get { return configDigest_; }
      set {
        configDigest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "organization" field.</summary>
    public const int OrganizationFieldNumber = 3;
    private global::AElf.Types.Address organization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Organization {
      get { return organization_; }
      set {
        organization_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateRawReportInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateRawReportInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Report, other.Report)) return false;
      if (ConfigDigest != other.ConfigDigest) return false;
      if (!object.Equals(Organization, other.Organization)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (report_ != null) hash ^= Report.GetHashCode();
      if (ConfigDigest.Length != 0) hash ^= ConfigDigest.GetHashCode();
      if (organization_ != null) hash ^= Organization.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (report_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Report);
      }
      if (ConfigDigest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ConfigDigest);
      }
      if (organization_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Organization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (report_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Report);
      }
      if (ConfigDigest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigDigest);
      }
      if (organization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Organization);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateRawReportInput other) {
      if (other == null) {
        return;
      }
      if (other.report_ != null) {
        if (report_ == null) {
          Report = new global::AElf.Contracts.Report.Report();
        }
        Report.MergeFrom(other.Report);
      }
      if (other.ConfigDigest.Length != 0) {
        ConfigDigest = other.ConfigDigest;
      }
      if (other.organization_ != null) {
        if (organization_ == null) {
          Organization = new global::AElf.Types.Address();
        }
        Organization.MergeFrom(other.Organization);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (report_ == null) {
              Report = new global::AElf.Contracts.Report.Report();
            }
            input.ReadMessage(Report);
            break;
          }
          case 18: {
            ConfigDigest = input.ReadBytes();
            break;
          }
          case 26: {
            if (organization_ == null) {
              Organization = new global::AElf.Types.Address();
            }
            input.ReadMessage(Organization);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OffChainQueryInfoList : pb::IMessage<OffChainQueryInfoList> {
    private static readonly pb::MessageParser<OffChainQueryInfoList> _parser = new pb::MessageParser<OffChainQueryInfoList>(() => new OffChainQueryInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OffChainQueryInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainQueryInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainQueryInfoList(OffChainQueryInfoList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainQueryInfoList Clone() {
      return new OffChainQueryInfoList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Report.OffChainQueryInfo> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Report.OffChainQueryInfo.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Report.OffChainQueryInfo> value_ = new pbc::RepeatedField<global::AElf.Contracts.Report.OffChainQueryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Report.OffChainQueryInfo> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OffChainQueryInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OffChainQueryInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OffChainQueryInfoList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddOffChainQueryInfoInput : pb::IMessage<AddOffChainQueryInfoInput> {
    private static readonly pb::MessageParser<AddOffChainQueryInfoInput> _parser = new pb::MessageParser<AddOffChainQueryInfoInput>(() => new AddOffChainQueryInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddOffChainQueryInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOffChainQueryInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOffChainQueryInfoInput(AddOffChainQueryInfoInput other) : this() {
      token_ = other.token_;
      offChainQueryInfo_ = other.offChainQueryInfo_ != null ? other.offChainQueryInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOffChainQueryInfoInput Clone() {
      return new AddOffChainQueryInfoInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "off_chain_query_info" field.</summary>
    public const int OffChainQueryInfoFieldNumber = 2;
    private global::AElf.Contracts.Report.OffChainQueryInfo offChainQueryInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Report.OffChainQueryInfo OffChainQueryInfo {
      get { return offChainQueryInfo_; }
      set {
        offChainQueryInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddOffChainQueryInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddOffChainQueryInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!object.Equals(OffChainQueryInfo, other.OffChainQueryInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (offChainQueryInfo_ != null) hash ^= OffChainQueryInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (offChainQueryInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OffChainQueryInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (offChainQueryInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffChainQueryInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddOffChainQueryInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.offChainQueryInfo_ != null) {
        if (offChainQueryInfo_ == null) {
          OffChainQueryInfo = new global::AElf.Contracts.Report.OffChainQueryInfo();
        }
        OffChainQueryInfo.MergeFrom(other.OffChainQueryInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            if (offChainQueryInfo_ == null) {
              OffChainQueryInfo = new global::AElf.Contracts.Report.OffChainQueryInfo();
            }
            input.ReadMessage(OffChainQueryInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveOffChainQueryInfoInput : pb::IMessage<RemoveOffChainQueryInfoInput> {
    private static readonly pb::MessageParser<RemoveOffChainQueryInfoInput> _parser = new pb::MessageParser<RemoveOffChainQueryInfoInput>(() => new RemoveOffChainQueryInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveOffChainQueryInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveOffChainQueryInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveOffChainQueryInfoInput(RemoveOffChainQueryInfoInput other) : this() {
      token_ = other.token_;
      removeNodeIndex_ = other.removeNodeIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveOffChainQueryInfoInput Clone() {
      return new RemoveOffChainQueryInfoInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remove_node_index" field.</summary>
    public const int RemoveNodeIndexFieldNumber = 2;
    private int removeNodeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemoveNodeIndex {
      get { return removeNodeIndex_; }
      set {
        removeNodeIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveOffChainQueryInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveOffChainQueryInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RemoveNodeIndex != other.RemoveNodeIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RemoveNodeIndex != 0) hash ^= RemoveNodeIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RemoveNodeIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemoveNodeIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RemoveNodeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemoveNodeIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveOffChainQueryInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RemoveNodeIndex != 0) {
        RemoveNodeIndex = other.RemoveNodeIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RemoveNodeIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportProposed : pb::IMessage<ReportProposed> {
    private static readonly pb::MessageParser<ReportProposed> _parser = new pb::MessageParser<ReportProposed>(() => new ReportProposed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportProposed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportProposed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportProposed(ReportProposed other) : this() {
      rawReport_ = other.rawReport_;
      observerAssociationAddress_ = other.observerAssociationAddress_ != null ? other.observerAssociationAddress_.Clone() : null;
      token_ = other.token_;
      roundId_ = other.roundId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportProposed Clone() {
      return new ReportProposed(this);
    }

    /// <summary>Field number for the "raw_report" field.</summary>
    public const int RawReportFieldNumber = 1;
    private string rawReport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RawReport {
      get { return rawReport_; }
      set {
        rawReport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "observer_association_address" field.</summary>
    public const int ObserverAssociationAddressFieldNumber = 2;
    private global::AElf.Types.Address observerAssociationAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ObserverAssociationAddress {
      get { return observerAssociationAddress_; }
      set {
        observerAssociationAddress_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 4;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportProposed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportProposed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RawReport != other.RawReport) return false;
      if (!object.Equals(ObserverAssociationAddress, other.ObserverAssociationAddress)) return false;
      if (Token != other.Token) return false;
      if (RoundId != other.RoundId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RawReport.Length != 0) hash ^= RawReport.GetHashCode();
      if (observerAssociationAddress_ != null) hash ^= ObserverAssociationAddress.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RawReport.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RawReport);
      }
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RoundId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RawReport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RawReport);
      }
      if (observerAssociationAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObserverAssociationAddress);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportProposed other) {
      if (other == null) {
        return;
      }
      if (other.RawReport.Length != 0) {
        RawReport = other.RawReport;
      }
      if (other.observerAssociationAddress_ != null) {
        if (observerAssociationAddress_ == null) {
          ObserverAssociationAddress = new global::AElf.Types.Address();
        }
        ObserverAssociationAddress.MergeFrom(other.ObserverAssociationAddress);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RawReport = input.ReadString();
            break;
          }
          case 18: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            RoundId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReportConfirmed : pb::IMessage<ReportConfirmed> {
    private static readonly pb::MessageParser<ReportConfirmed> _parser = new pb::MessageParser<ReportConfirmed>(() => new ReportConfirmed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportConfirmed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportConfirmed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportConfirmed(ReportConfirmed other) : this() {
      roundId_ = other.roundId_;
      signature_ = other.signature_;
      observerAssociationAddress_ = other.observerAssociationAddress_ != null ? other.observerAssociationAddress_.Clone() : null;
      token_ = other.token_;
      isAllNodeConfirmed_ = other.isAllNodeConfirmed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportConfirmed Clone() {
      return new ReportConfirmed(this);
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private string signature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "observer_association_address" field.</summary>
    public const int ObserverAssociationAddressFieldNumber = 3;
    private global::AElf.Types.Address observerAssociationAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ObserverAssociationAddress {
      get { return observerAssociationAddress_; }
      set {
        observerAssociationAddress_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_all_node_confirmed" field.</summary>
    public const int IsAllNodeConfirmedFieldNumber = 5;
    private bool isAllNodeConfirmed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAllNodeConfirmed {
      get { return isAllNodeConfirmed_; }
      set {
        isAllNodeConfirmed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportConfirmed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportConfirmed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundId != other.RoundId) return false;
      if (Signature != other.Signature) return false;
      if (!object.Equals(ObserverAssociationAddress, other.ObserverAssociationAddress)) return false;
      if (Token != other.Token) return false;
      if (IsAllNodeConfirmed != other.IsAllNodeConfirmed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (observerAssociationAddress_ != null) hash ^= ObserverAssociationAddress.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (IsAllNodeConfirmed != false) hash ^= IsAllNodeConfirmed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoundId);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (IsAllNodeConfirmed != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAllNodeConfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (observerAssociationAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObserverAssociationAddress);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (IsAllNodeConfirmed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportConfirmed other) {
      if (other == null) {
        return;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.observerAssociationAddress_ != null) {
        if (observerAssociationAddress_ == null) {
          ObserverAssociationAddress = new global::AElf.Types.Address();
        }
        ObserverAssociationAddress.MergeFrom(other.ObserverAssociationAddress);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.IsAllNodeConfirmed != false) {
        IsAllNodeConfirmed = other.IsAllNodeConfirmed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoundId = input.ReadInt64();
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
          case 26: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 40: {
            IsAllNodeConfirmed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OffChainAggregationRegistered : pb::IMessage<OffChainAggregationRegistered> {
    private static readonly pb::MessageParser<OffChainAggregationRegistered> _parser = new pb::MessageParser<OffChainAggregationRegistered>(() => new OffChainAggregationRegistered());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OffChainAggregationRegistered> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainAggregationRegistered() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainAggregationRegistered(OffChainAggregationRegistered other) : this() {
      token_ = other.token_;
      offChainQueryInfoList_ = other.offChainQueryInfoList_ != null ? other.offChainQueryInfoList_.Clone() : null;
      observerAssociationAddress_ = other.observerAssociationAddress_ != null ? other.observerAssociationAddress_.Clone() : null;
      configDigest_ = other.configDigest_;
      aggregateThreshold_ = other.aggregateThreshold_;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      chainType_ = other.chainType_;
      register_ = other.register_ != null ? other.register_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffChainAggregationRegistered Clone() {
      return new OffChainAggregationRegistered(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "off_chain_query_info_list" field.</summary>
    public const int OffChainQueryInfoListFieldNumber = 2;
    private global::AElf.Contracts.Report.OffChainQueryInfoList offChainQueryInfoList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Report.OffChainQueryInfoList OffChainQueryInfoList {
      get { return offChainQueryInfoList_; }
      set {
        offChainQueryInfoList_ = value;
      }
    }

    /// <summary>Field number for the "observer_association_address" field.</summary>
    public const int ObserverAssociationAddressFieldNumber = 3;
    private global::AElf.Types.Address observerAssociationAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ObserverAssociationAddress {
      get { return observerAssociationAddress_; }
      set {
        observerAssociationAddress_ = value;
      }
    }

    /// <summary>Field number for the "config_digest" field.</summary>
    public const int ConfigDigestFieldNumber = 4;
    private pb::ByteString configDigest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigDigest {
      get { return configDigest_; }
      set {
        configDigest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 5;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 6;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "chain_type" field.</summary>
    public const int ChainTypeFieldNumber = 7;
    private string chainType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainType {
      get { return chainType_; }
      set {
        chainType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "register" field.</summary>
    public const int RegisterFieldNumber = 8;
    private global::AElf.Types.Address register_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Register {
      get { return register_; }
      set {
        register_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OffChainAggregationRegistered);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OffChainAggregationRegistered other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!object.Equals(OffChainQueryInfoList, other.OffChainQueryInfoList)) return false;
      if (!object.Equals(ObserverAssociationAddress, other.ObserverAssociationAddress)) return false;
      if (ConfigDigest != other.ConfigDigest) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (ChainType != other.ChainType) return false;
      if (!object.Equals(Register, other.Register)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (offChainQueryInfoList_ != null) hash ^= OffChainQueryInfoList.GetHashCode();
      if (observerAssociationAddress_ != null) hash ^= ObserverAssociationAddress.GetHashCode();
      if (ConfigDigest.Length != 0) hash ^= ConfigDigest.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (ChainType.Length != 0) hash ^= ChainType.GetHashCode();
      if (register_ != null) hash ^= Register.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (offChainQueryInfoList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OffChainQueryInfoList);
      }
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (ConfigDigest.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ConfigDigest);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (ChainType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ChainType);
      }
      if (register_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Register);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (offChainQueryInfoList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffChainQueryInfoList);
      }
      if (observerAssociationAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObserverAssociationAddress);
      }
      if (ConfigDigest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigDigest);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (ChainType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainType);
      }
      if (register_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Register);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OffChainAggregationRegistered other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.offChainQueryInfoList_ != null) {
        if (offChainQueryInfoList_ == null) {
          OffChainQueryInfoList = new global::AElf.Contracts.Report.OffChainQueryInfoList();
        }
        OffChainQueryInfoList.MergeFrom(other.OffChainQueryInfoList);
      }
      if (other.observerAssociationAddress_ != null) {
        if (observerAssociationAddress_ == null) {
          ObserverAssociationAddress = new global::AElf.Types.Address();
        }
        ObserverAssociationAddress.MergeFrom(other.ObserverAssociationAddress);
      }
      if (other.ConfigDigest.Length != 0) {
        ConfigDigest = other.ConfigDigest;
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.ChainType.Length != 0) {
        ChainType = other.ChainType;
      }
      if (other.register_ != null) {
        if (register_ == null) {
          Register = new global::AElf.Types.Address();
        }
        Register.MergeFrom(other.Register);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            if (offChainQueryInfoList_ == null) {
              OffChainQueryInfoList = new global::AElf.Contracts.Report.OffChainQueryInfoList();
            }
            input.ReadMessage(OffChainQueryInfoList);
            break;
          }
          case 26: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 34: {
            ConfigDigest = input.ReadBytes();
            break;
          }
          case 40: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 50: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 58: {
            ChainType = input.ReadString();
            break;
          }
          case 66: {
            if (register_ == null) {
              Register = new global::AElf.Types.Address();
            }
            input.ReadMessage(Register);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerkleReportNodeAdded : pb::IMessage<MerkleReportNodeAdded> {
    private static readonly pb::MessageParser<MerkleReportNodeAdded> _parser = new pb::MessageParser<MerkleReportNodeAdded>(() => new MerkleReportNodeAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerkleReportNodeAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Report.ReportContractReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleReportNodeAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleReportNodeAdded(MerkleReportNodeAdded other) : this() {
      token_ = other.token_;
      nodeIndex_ = other.nodeIndex_;
      nodeRoundId_ = other.nodeRoundId_;
      aggregatedData_ = other.aggregatedData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleReportNodeAdded Clone() {
      return new MerkleReportNodeAdded(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_index" field.</summary>
    public const int NodeIndexFieldNumber = 2;
    private int nodeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeIndex {
      get { return nodeIndex_; }
      set {
        nodeIndex_ = value;
      }
    }

    /// <summary>Field number for the "node_round_id" field.</summary>
    public const int NodeRoundIdFieldNumber = 3;
    private long nodeRoundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeRoundId {
      get { return nodeRoundId_; }
      set {
        nodeRoundId_ = value;
      }
    }

    /// <summary>Field number for the "aggregated_data" field.</summary>
    public const int AggregatedDataFieldNumber = 4;
    private string aggregatedData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AggregatedData {
      get { return aggregatedData_; }
      set {
        aggregatedData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerkleReportNodeAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerkleReportNodeAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (NodeIndex != other.NodeIndex) return false;
      if (NodeRoundId != other.NodeRoundId) return false;
      if (AggregatedData != other.AggregatedData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (NodeIndex != 0) hash ^= NodeIndex.GetHashCode();
      if (NodeRoundId != 0L) hash ^= NodeRoundId.GetHashCode();
      if (AggregatedData.Length != 0) hash ^= AggregatedData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (NodeIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NodeIndex);
      }
      if (NodeRoundId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NodeRoundId);
      }
      if (AggregatedData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AggregatedData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (NodeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeIndex);
      }
      if (NodeRoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeRoundId);
      }
      if (AggregatedData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AggregatedData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerkleReportNodeAdded other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.NodeIndex != 0) {
        NodeIndex = other.NodeIndex;
      }
      if (other.NodeRoundId != 0L) {
        NodeRoundId = other.NodeRoundId;
      }
      if (other.AggregatedData.Length != 0) {
        AggregatedData = other.AggregatedData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            NodeIndex = input.ReadInt32();
            break;
          }
          case 24: {
            NodeRoundId = input.ReadInt64();
            break;
          }
          case 34: {
            AggregatedData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
