// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: merkle_tree_recorder.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MTRecorder {

  /// <summary>Holder for reflection information generated from merkle_tree_recorder.proto</summary>
  public static partial class MerkleTreeRecorderReflection {

    #region Descriptor
    /// <summary>File descriptor for merkle_tree_recorder.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MerkleTreeRecorderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChptZXJrbGVfdHJlZV9yZWNvcmRlci5wcm90bxIKTVRSZWNvcmRlchoPYWVs",
            "Zi9jb3JlLnByb3RvGgphY3MxLnByb3RvIkQKCFJlY29yZGVyEhwKBWFkbWlu",
            "GAEgASgLMg0uYWVsZi5BZGRyZXNzEhoKEm1heGltYWxfbGVhZl9jb3VudBgC",
            "IAEoAyJrChVSZWNvcmRNZXJrbGVUcmVlSW5wdXQSEwoLcmVjb3JkZXJfaWQY",
            "ASABKAMSFwoPbGFzdF9sZWFmX2luZGV4GAIgASgDEiQKEG1lcmtsZV90cmVl",
            "X3Jvb3QYAyABKAsyCi5hZWxmLkhhc2giZQoKTWVya2xlVHJlZRIXCg9sYXN0",
            "X2xlYWZfaW5kZXgYASABKAMSGAoQZmlyc3RfbGVhZl9pbmRleBgCIAEoAxIk",
            "ChBtZXJrbGVfdHJlZV9yb290GAMgASgLMgouYWVsZi5IYXNoIkgKHUdldExl",
            "YWZMb2NhdGVkTWVya2xlVHJlZUlucHV0EhIKCmxlYWZfaW5kZXgYASABKAMS",
            "EwoLcmVjb3JkZXJfaWQYAiABKAMiZwoeR2V0TGVhZkxvY2F0ZWRNZXJrbGVU",
            "cmVlT3V0cHV0EhcKD2xhc3RfbGVhZl9pbmRleBgBIAEoAxIYChBmaXJzdF9s",
            "ZWFmX2luZGV4GAIgASgDEhIKCnRyZWVfaW5kZXgYAyABKAMiQgoSR2V0TWVy",
            "a2xlVHJlZUlucHV0EhMKC3JlY29yZGVyX2lkGAEgASgDEhcKD2xhc3RfbGVh",
            "Zl9pbmRleBgCIAEoAyKGAQoQTWVya2xlUHJvb2ZJbnB1dBIXCg9sYXN0X2xl",
            "YWZfaW5kZXgYASABKAMSHQoJbGVhZl9ub2RlGAIgASgLMgouYWVsZi5IYXNo",
            "EiUKC21lcmtsZV9wYXRoGAMgASgLMhAuYWVsZi5NZXJrbGVQYXRoEhMKC3Jl",
            "Y29yZGVyX2lkGAQgASgDIiYKD1JlY29yZGVySWRJbnB1dBITCgtyZWNvcmRl",
            "cl9pZBgBIAEoAyJmCg9SZWNvcmRlckNyZWF0ZWQSHAoFYWRtaW4YASABKAsy",
            "DS5hZWxmLkFkZHJlc3MSGgoSbWF4aW1hbF9sZWFmX2NvdW50GAIgASgDEhMK",
            "C3JlY29yZGVyX2lkGAMgASgDOgSguxgBIk8KEk1lcmtsZVRyZWVSZWNvcmRl",
            "ZBIaCgtyZWNvcmRlcl9pZBgBIAEoA0IFiI/1AQESFwoPbGFzdF9sZWFmX2lu",
            "ZGV4GAIgASgDOgSguxgBMqIIChpNZXJrbGVUcmVlUmVjb3JkZXJDb250cmFj",
            "dBI+CgpJbml0aWFsaXplEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASQAoOQ3JlYXRlUmVjb3JkZXISFC5NVFJl",
            "Y29yZGVyLlJlY29yZGVyGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASTwoQ",
            "UmVjb3JkTWVya2xlVHJlZRIhLk1UUmVjb3JkZXIuUmVjb3JkTWVya2xlVHJl",
            "ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNgoLQ2hhbmdlT3du",
            "ZXISDS5hZWxmLkFkZHJlc3MaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJO",
            "CgtNZXJrbGVQcm9vZhIcLk1UUmVjb3JkZXIuTWVya2xlUHJvb2ZJbnB1dBoa",
            "Lmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUiBYiJ9wEBEngKGEdldExlYWZM",
            "b2NhdGVkTWVya2xlVHJlZRIpLk1UUmVjb3JkZXIuR2V0TGVhZkxvY2F0ZWRN",
            "ZXJrbGVUcmVlSW5wdXQaKi5NVFJlY29yZGVyLkdldExlYWZMb2NhdGVkTWVy",
            "a2xlVHJlZU91dHB1dCIFiIn3AQESTgoNR2V0TWVya2xlVHJlZRIeLk1UUmVj",
            "b3JkZXIuR2V0TWVya2xlVHJlZUlucHV0GhYuTVRSZWNvcmRlci5NZXJrbGVU",
            "cmVlIgWIifcBARI4CghHZXRPd25lchIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eRoNLmFlbGYuQWRkcmVzcyIFiIn3AQESRwoLR2V0UmVjb3JkZXISGy5NVFJl",
            "Y29yZGVyLlJlY29yZGVySWRJbnB1dBoULk1UUmVjb3JkZXIuUmVjb3JkZXIi",
            "BYiJ9wEBEk4KEEdldFJlY29yZGVyQ291bnQSFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQESWwoY",
            "R2V0TGFzdFJlY29yZGVkTGVhZkluZGV4EhsuTVRSZWNvcmRlci5SZWNvcmRl",
            "cklkSW5wdXQaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQES",
            "WAoVR2V0U2F0aXNmaWVkVHJlZUNvdW50EhsuTVRSZWNvcmRlci5SZWNvcmRl",
            "cklkSW5wdXQaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQEa",
            "VbLM9gFBQUVsZi5Db250cmFjdHMuTWVya2xlVHJlZVJlY29yZGVyLk1lcmts",
            "ZVRyZWVSZWNvcmRlckNvbnRyYWN0U3RhdGXKyvYBCmFjczEucHJvdG9iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.Standards.ACS1.Acs1Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.Recorder), global::MTRecorder.Recorder.Parser, new[]{ "Admin", "MaximalLeafCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.RecordMerkleTreeInput), global::MTRecorder.RecordMerkleTreeInput.Parser, new[]{ "RecorderId", "LastLeafIndex", "MerkleTreeRoot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.MerkleTree), global::MTRecorder.MerkleTree.Parser, new[]{ "LastLeafIndex", "FirstLeafIndex", "MerkleTreeRoot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.GetLeafLocatedMerkleTreeInput), global::MTRecorder.GetLeafLocatedMerkleTreeInput.Parser, new[]{ "LeafIndex", "RecorderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.GetLeafLocatedMerkleTreeOutput), global::MTRecorder.GetLeafLocatedMerkleTreeOutput.Parser, new[]{ "LastLeafIndex", "FirstLeafIndex", "TreeIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.GetMerkleTreeInput), global::MTRecorder.GetMerkleTreeInput.Parser, new[]{ "RecorderId", "LastLeafIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.MerkleProofInput), global::MTRecorder.MerkleProofInput.Parser, new[]{ "LastLeafIndex", "LeafNode", "MerklePath", "RecorderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.RecorderIdInput), global::MTRecorder.RecorderIdInput.Parser, new[]{ "RecorderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.RecorderCreated), global::MTRecorder.RecorderCreated.Parser, new[]{ "Admin", "MaximalLeafCount", "RecorderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MTRecorder.MerkleTreeRecorded), global::MTRecorder.MerkleTreeRecorded.Parser, new[]{ "RecorderId", "LastLeafIndex" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Recorder : pb::IMessage<Recorder> {
    private static readonly pb::MessageParser<Recorder> _parser = new pb::MessageParser<Recorder>(() => new Recorder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recorder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recorder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recorder(Recorder other) : this() {
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      maximalLeafCount_ = other.maximalLeafCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recorder Clone() {
      return new Recorder(this);
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 1;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "maximal_leaf_count" field.</summary>
    public const int MaximalLeafCountFieldNumber = 2;
    private long maximalLeafCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaximalLeafCount {
      get { return maximalLeafCount_; }
      set {
        maximalLeafCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recorder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recorder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Admin, other.Admin)) return false;
      if (MaximalLeafCount != other.MaximalLeafCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (MaximalLeafCount != 0L) hash ^= MaximalLeafCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (admin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Admin);
      }
      if (MaximalLeafCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaximalLeafCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (MaximalLeafCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaximalLeafCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recorder other) {
      if (other == null) {
        return;
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      if (other.MaximalLeafCount != 0L) {
        MaximalLeafCount = other.MaximalLeafCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
          case 16: {
            MaximalLeafCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordMerkleTreeInput : pb::IMessage<RecordMerkleTreeInput> {
    private static readonly pb::MessageParser<RecordMerkleTreeInput> _parser = new pb::MessageParser<RecordMerkleTreeInput>(() => new RecordMerkleTreeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordMerkleTreeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMerkleTreeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMerkleTreeInput(RecordMerkleTreeInput other) : this() {
      recorderId_ = other.recorderId_;
      lastLeafIndex_ = other.lastLeafIndex_;
      merkleTreeRoot_ = other.merkleTreeRoot_ != null ? other.merkleTreeRoot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMerkleTreeInput Clone() {
      return new RecordMerkleTreeInput(this);
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 1;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    /// <summary>Field number for the "last_leaf_index" field.</summary>
    public const int LastLeafIndexFieldNumber = 2;
    private long lastLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLeafIndex {
      get { return lastLeafIndex_; }
      set {
        lastLeafIndex_ = value;
      }
    }

    /// <summary>Field number for the "merkle_tree_root" field.</summary>
    public const int MerkleTreeRootFieldNumber = 3;
    private global::AElf.Types.Hash merkleTreeRoot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash MerkleTreeRoot {
      get { return merkleTreeRoot_; }
      set {
        merkleTreeRoot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordMerkleTreeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordMerkleTreeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecorderId != other.RecorderId) return false;
      if (LastLeafIndex != other.LastLeafIndex) return false;
      if (!object.Equals(MerkleTreeRoot, other.MerkleTreeRoot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (LastLeafIndex != 0L) hash ^= LastLeafIndex.GetHashCode();
      if (merkleTreeRoot_ != null) hash ^= MerkleTreeRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecorderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RecorderId);
      }
      if (LastLeafIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastLeafIndex);
      }
      if (merkleTreeRoot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MerkleTreeRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (LastLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLeafIndex);
      }
      if (merkleTreeRoot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerkleTreeRoot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordMerkleTreeInput other) {
      if (other == null) {
        return;
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      if (other.LastLeafIndex != 0L) {
        LastLeafIndex = other.LastLeafIndex;
      }
      if (other.merkleTreeRoot_ != null) {
        if (merkleTreeRoot_ == null) {
          MerkleTreeRoot = new global::AElf.Types.Hash();
        }
        MerkleTreeRoot.MergeFrom(other.MerkleTreeRoot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecorderId = input.ReadInt64();
            break;
          }
          case 16: {
            LastLeafIndex = input.ReadInt64();
            break;
          }
          case 26: {
            if (merkleTreeRoot_ == null) {
              MerkleTreeRoot = new global::AElf.Types.Hash();
            }
            input.ReadMessage(MerkleTreeRoot);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerkleTree : pb::IMessage<MerkleTree> {
    private static readonly pb::MessageParser<MerkleTree> _parser = new pb::MessageParser<MerkleTree>(() => new MerkleTree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerkleTree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleTree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleTree(MerkleTree other) : this() {
      lastLeafIndex_ = other.lastLeafIndex_;
      firstLeafIndex_ = other.firstLeafIndex_;
      merkleTreeRoot_ = other.merkleTreeRoot_ != null ? other.merkleTreeRoot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleTree Clone() {
      return new MerkleTree(this);
    }

    /// <summary>Field number for the "last_leaf_index" field.</summary>
    public const int LastLeafIndexFieldNumber = 1;
    private long lastLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLeafIndex {
      get { return lastLeafIndex_; }
      set {
        lastLeafIndex_ = value;
      }
    }

    /// <summary>Field number for the "first_leaf_index" field.</summary>
    public const int FirstLeafIndexFieldNumber = 2;
    private long firstLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstLeafIndex {
      get { return firstLeafIndex_; }
      set {
        firstLeafIndex_ = value;
      }
    }

    /// <summary>Field number for the "merkle_tree_root" field.</summary>
    public const int MerkleTreeRootFieldNumber = 3;
    private global::AElf.Types.Hash merkleTreeRoot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash MerkleTreeRoot {
      get { return merkleTreeRoot_; }
      set {
        merkleTreeRoot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerkleTree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerkleTree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastLeafIndex != other.LastLeafIndex) return false;
      if (FirstLeafIndex != other.FirstLeafIndex) return false;
      if (!object.Equals(MerkleTreeRoot, other.MerkleTreeRoot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastLeafIndex != 0L) hash ^= LastLeafIndex.GetHashCode();
      if (FirstLeafIndex != 0L) hash ^= FirstLeafIndex.GetHashCode();
      if (merkleTreeRoot_ != null) hash ^= MerkleTreeRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastLeafIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastLeafIndex);
      }
      if (FirstLeafIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FirstLeafIndex);
      }
      if (merkleTreeRoot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MerkleTreeRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLeafIndex);
      }
      if (FirstLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstLeafIndex);
      }
      if (merkleTreeRoot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerkleTreeRoot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerkleTree other) {
      if (other == null) {
        return;
      }
      if (other.LastLeafIndex != 0L) {
        LastLeafIndex = other.LastLeafIndex;
      }
      if (other.FirstLeafIndex != 0L) {
        FirstLeafIndex = other.FirstLeafIndex;
      }
      if (other.merkleTreeRoot_ != null) {
        if (merkleTreeRoot_ == null) {
          MerkleTreeRoot = new global::AElf.Types.Hash();
        }
        MerkleTreeRoot.MergeFrom(other.MerkleTreeRoot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastLeafIndex = input.ReadInt64();
            break;
          }
          case 16: {
            FirstLeafIndex = input.ReadInt64();
            break;
          }
          case 26: {
            if (merkleTreeRoot_ == null) {
              MerkleTreeRoot = new global::AElf.Types.Hash();
            }
            input.ReadMessage(MerkleTreeRoot);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLeafLocatedMerkleTreeInput : pb::IMessage<GetLeafLocatedMerkleTreeInput> {
    private static readonly pb::MessageParser<GetLeafLocatedMerkleTreeInput> _parser = new pb::MessageParser<GetLeafLocatedMerkleTreeInput>(() => new GetLeafLocatedMerkleTreeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLeafLocatedMerkleTreeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLeafLocatedMerkleTreeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLeafLocatedMerkleTreeInput(GetLeafLocatedMerkleTreeInput other) : this() {
      leafIndex_ = other.leafIndex_;
      recorderId_ = other.recorderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLeafLocatedMerkleTreeInput Clone() {
      return new GetLeafLocatedMerkleTreeInput(this);
    }

    /// <summary>Field number for the "leaf_index" field.</summary>
    public const int LeafIndexFieldNumber = 1;
    private long leafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeafIndex {
      get { return leafIndex_; }
      set {
        leafIndex_ = value;
      }
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 2;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLeafLocatedMerkleTreeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLeafLocatedMerkleTreeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeafIndex != other.LeafIndex) return false;
      if (RecorderId != other.RecorderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeafIndex != 0L) hash ^= LeafIndex.GetHashCode();
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeafIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LeafIndex);
      }
      if (RecorderId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RecorderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeafIndex);
      }
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLeafLocatedMerkleTreeInput other) {
      if (other == null) {
        return;
      }
      if (other.LeafIndex != 0L) {
        LeafIndex = other.LeafIndex;
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeafIndex = input.ReadInt64();
            break;
          }
          case 16: {
            RecorderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLeafLocatedMerkleTreeOutput : pb::IMessage<GetLeafLocatedMerkleTreeOutput> {
    private static readonly pb::MessageParser<GetLeafLocatedMerkleTreeOutput> _parser = new pb::MessageParser<GetLeafLocatedMerkleTreeOutput>(() => new GetLeafLocatedMerkleTreeOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLeafLocatedMerkleTreeOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLeafLocatedMerkleTreeOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLeafLocatedMerkleTreeOutput(GetLeafLocatedMerkleTreeOutput other) : this() {
      lastLeafIndex_ = other.lastLeafIndex_;
      firstLeafIndex_ = other.firstLeafIndex_;
      treeIndex_ = other.treeIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLeafLocatedMerkleTreeOutput Clone() {
      return new GetLeafLocatedMerkleTreeOutput(this);
    }

    /// <summary>Field number for the "last_leaf_index" field.</summary>
    public const int LastLeafIndexFieldNumber = 1;
    private long lastLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLeafIndex {
      get { return lastLeafIndex_; }
      set {
        lastLeafIndex_ = value;
      }
    }

    /// <summary>Field number for the "first_leaf_index" field.</summary>
    public const int FirstLeafIndexFieldNumber = 2;
    private long firstLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstLeafIndex {
      get { return firstLeafIndex_; }
      set {
        firstLeafIndex_ = value;
      }
    }

    /// <summary>Field number for the "tree_index" field.</summary>
    public const int TreeIndexFieldNumber = 3;
    private long treeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TreeIndex {
      get { return treeIndex_; }
      set {
        treeIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLeafLocatedMerkleTreeOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLeafLocatedMerkleTreeOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastLeafIndex != other.LastLeafIndex) return false;
      if (FirstLeafIndex != other.FirstLeafIndex) return false;
      if (TreeIndex != other.TreeIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastLeafIndex != 0L) hash ^= LastLeafIndex.GetHashCode();
      if (FirstLeafIndex != 0L) hash ^= FirstLeafIndex.GetHashCode();
      if (TreeIndex != 0L) hash ^= TreeIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastLeafIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastLeafIndex);
      }
      if (FirstLeafIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FirstLeafIndex);
      }
      if (TreeIndex != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TreeIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLeafIndex);
      }
      if (FirstLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstLeafIndex);
      }
      if (TreeIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TreeIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLeafLocatedMerkleTreeOutput other) {
      if (other == null) {
        return;
      }
      if (other.LastLeafIndex != 0L) {
        LastLeafIndex = other.LastLeafIndex;
      }
      if (other.FirstLeafIndex != 0L) {
        FirstLeafIndex = other.FirstLeafIndex;
      }
      if (other.TreeIndex != 0L) {
        TreeIndex = other.TreeIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastLeafIndex = input.ReadInt64();
            break;
          }
          case 16: {
            FirstLeafIndex = input.ReadInt64();
            break;
          }
          case 24: {
            TreeIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMerkleTreeInput : pb::IMessage<GetMerkleTreeInput> {
    private static readonly pb::MessageParser<GetMerkleTreeInput> _parser = new pb::MessageParser<GetMerkleTreeInput>(() => new GetMerkleTreeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMerkleTreeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMerkleTreeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMerkleTreeInput(GetMerkleTreeInput other) : this() {
      recorderId_ = other.recorderId_;
      lastLeafIndex_ = other.lastLeafIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMerkleTreeInput Clone() {
      return new GetMerkleTreeInput(this);
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 1;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    /// <summary>Field number for the "last_leaf_index" field.</summary>
    public const int LastLeafIndexFieldNumber = 2;
    private long lastLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLeafIndex {
      get { return lastLeafIndex_; }
      set {
        lastLeafIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMerkleTreeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMerkleTreeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecorderId != other.RecorderId) return false;
      if (LastLeafIndex != other.LastLeafIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (LastLeafIndex != 0L) hash ^= LastLeafIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecorderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RecorderId);
      }
      if (LastLeafIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastLeafIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (LastLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLeafIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMerkleTreeInput other) {
      if (other == null) {
        return;
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      if (other.LastLeafIndex != 0L) {
        LastLeafIndex = other.LastLeafIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecorderId = input.ReadInt64();
            break;
          }
          case 16: {
            LastLeafIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerkleProofInput : pb::IMessage<MerkleProofInput> {
    private static readonly pb::MessageParser<MerkleProofInput> _parser = new pb::MessageParser<MerkleProofInput>(() => new MerkleProofInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerkleProofInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleProofInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleProofInput(MerkleProofInput other) : this() {
      lastLeafIndex_ = other.lastLeafIndex_;
      leafNode_ = other.leafNode_ != null ? other.leafNode_.Clone() : null;
      merklePath_ = other.merklePath_ != null ? other.merklePath_.Clone() : null;
      recorderId_ = other.recorderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleProofInput Clone() {
      return new MerkleProofInput(this);
    }

    /// <summary>Field number for the "last_leaf_index" field.</summary>
    public const int LastLeafIndexFieldNumber = 1;
    private long lastLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLeafIndex {
      get { return lastLeafIndex_; }
      set {
        lastLeafIndex_ = value;
      }
    }

    /// <summary>Field number for the "leaf_node" field.</summary>
    public const int LeafNodeFieldNumber = 2;
    private global::AElf.Types.Hash leafNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LeafNode {
      get { return leafNode_; }
      set {
        leafNode_ = value;
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 3;
    private global::AElf.Types.MerklePath merklePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.MerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 4;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerkleProofInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerkleProofInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastLeafIndex != other.LastLeafIndex) return false;
      if (!object.Equals(LeafNode, other.LeafNode)) return false;
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      if (RecorderId != other.RecorderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastLeafIndex != 0L) hash ^= LastLeafIndex.GetHashCode();
      if (leafNode_ != null) hash ^= LeafNode.GetHashCode();
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastLeafIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastLeafIndex);
      }
      if (leafNode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeafNode);
      }
      if (merklePath_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MerklePath);
      }
      if (RecorderId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RecorderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLeafIndex);
      }
      if (leafNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeafNode);
      }
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerkleProofInput other) {
      if (other == null) {
        return;
      }
      if (other.LastLeafIndex != 0L) {
        LastLeafIndex = other.LastLeafIndex;
      }
      if (other.leafNode_ != null) {
        if (leafNode_ == null) {
          LeafNode = new global::AElf.Types.Hash();
        }
        LeafNode.MergeFrom(other.LeafNode);
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          MerklePath = new global::AElf.Types.MerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastLeafIndex = input.ReadInt64();
            break;
          }
          case 18: {
            if (leafNode_ == null) {
              LeafNode = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LeafNode);
            break;
          }
          case 26: {
            if (merklePath_ == null) {
              MerklePath = new global::AElf.Types.MerklePath();
            }
            input.ReadMessage(MerklePath);
            break;
          }
          case 32: {
            RecorderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecorderIdInput : pb::IMessage<RecorderIdInput> {
    private static readonly pb::MessageParser<RecorderIdInput> _parser = new pb::MessageParser<RecorderIdInput>(() => new RecorderIdInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecorderIdInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecorderIdInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecorderIdInput(RecorderIdInput other) : this() {
      recorderId_ = other.recorderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecorderIdInput Clone() {
      return new RecorderIdInput(this);
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 1;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecorderIdInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecorderIdInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecorderId != other.RecorderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecorderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RecorderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecorderIdInput other) {
      if (other == null) {
        return;
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecorderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecorderCreated : pb::IMessage<RecorderCreated> {
    private static readonly pb::MessageParser<RecorderCreated> _parser = new pb::MessageParser<RecorderCreated>(() => new RecorderCreated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecorderCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecorderCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecorderCreated(RecorderCreated other) : this() {
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      maximalLeafCount_ = other.maximalLeafCount_;
      recorderId_ = other.recorderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecorderCreated Clone() {
      return new RecorderCreated(this);
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 1;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "maximal_leaf_count" field.</summary>
    public const int MaximalLeafCountFieldNumber = 2;
    private long maximalLeafCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaximalLeafCount {
      get { return maximalLeafCount_; }
      set {
        maximalLeafCount_ = value;
      }
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 3;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecorderCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecorderCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Admin, other.Admin)) return false;
      if (MaximalLeafCount != other.MaximalLeafCount) return false;
      if (RecorderId != other.RecorderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (MaximalLeafCount != 0L) hash ^= MaximalLeafCount.GetHashCode();
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (admin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Admin);
      }
      if (MaximalLeafCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaximalLeafCount);
      }
      if (RecorderId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RecorderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (MaximalLeafCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaximalLeafCount);
      }
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecorderCreated other) {
      if (other == null) {
        return;
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      if (other.MaximalLeafCount != 0L) {
        MaximalLeafCount = other.MaximalLeafCount;
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
          case 16: {
            MaximalLeafCount = input.ReadInt64();
            break;
          }
          case 24: {
            RecorderId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerkleTreeRecorded : pb::IMessage<MerkleTreeRecorded> {
    private static readonly pb::MessageParser<MerkleTreeRecorded> _parser = new pb::MessageParser<MerkleTreeRecorded>(() => new MerkleTreeRecorded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerkleTreeRecorded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MTRecorder.MerkleTreeRecorderReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleTreeRecorded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleTreeRecorded(MerkleTreeRecorded other) : this() {
      recorderId_ = other.recorderId_;
      lastLeafIndex_ = other.lastLeafIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerkleTreeRecorded Clone() {
      return new MerkleTreeRecorded(this);
    }

    /// <summary>Field number for the "recorder_id" field.</summary>
    public const int RecorderIdFieldNumber = 1;
    private long recorderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecorderId {
      get { return recorderId_; }
      set {
        recorderId_ = value;
      }
    }

    /// <summary>Field number for the "last_leaf_index" field.</summary>
    public const int LastLeafIndexFieldNumber = 2;
    private long lastLeafIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLeafIndex {
      get { return lastLeafIndex_; }
      set {
        lastLeafIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerkleTreeRecorded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerkleTreeRecorded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecorderId != other.RecorderId) return false;
      if (LastLeafIndex != other.LastLeafIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecorderId != 0L) hash ^= RecorderId.GetHashCode();
      if (LastLeafIndex != 0L) hash ^= LastLeafIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecorderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RecorderId);
      }
      if (LastLeafIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastLeafIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecorderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecorderId);
      }
      if (LastLeafIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLeafIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerkleTreeRecorded other) {
      if (other == null) {
        return;
      }
      if (other.RecorderId != 0L) {
        RecorderId = other.RecorderId;
      }
      if (other.LastLeafIndex != 0L) {
        LastLeafIndex = other.LastLeafIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecorderId = input.ReadInt64();
            break;
          }
          case 16: {
            LastLeafIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
